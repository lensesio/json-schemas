{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Lenses Provisioning",
  "type": "object",
  "definitions": {
    "kafkaBootstrapServers": {
      "type": "object",
      "description": "Kafka bootstrap servers.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9.-]+:[0-9]{1,5}$",
            "description": "Enter the bootstrap server URL (e.g., 'broker:9092', 'broker:9092'). Protocol Prefix set in protocol setting."
          },
          "description": "List of bootstrap servers with protocol prefixes."
        }
      },
      "required": ["value"]
    },
    "schemaRegistryUrls": {
      "type": "object",
      "description": "Schema Registry URLs.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(http|https)://([a-zA-Z0-9._%+-]+:[a-zA-Z0-9._%+-]+@)?[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*(:[0-9]+)?(/.*)?$",
            "description": "Schema Registry URL. Must include scheme (http/https) and valid hostname."
          },
          "description": "Enter the Schema Registry URLs. Must include scheme (http/https) and valid hostname. Port is optional. Format: http(s)://hostname[:port][/path]"
        }
      },
      "required": ["value"]
    },
    "workers": {
      "type": "object",
      "description": "Connect worker URLs.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(http|https)://[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*:[0-9]+(/.*)?$",
            "description": "Array of Connect worker URL"
          },
          "description": "Enter the Connect worker URLs"
        }
      },
      "required": ["value"]
    },
    "protocol": {
      "type": "object",
      "description": "Kafka protocol.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the Protocol value (e.g. SASL_SSL, PLAINTEXT, etc.)",
          "enum": ["SASL_PLAINTEXT", "SASL_SSL", "PLAINTEXT", "SSL"]
        }
      },
      "required": ["value"]
    },
    "saslMechanism": {
      "type": "object",
      "description": "SASL mechanism.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the SASL mechanism (PLAIN, SCRAM-SHA-256, SCRAM-SHA-512).",
          "enum": ["AWS_MSK_IAM", "PLAIN", "SCRAM-SHA-256", "SCRAM-SHA-512"]
        }
      },
      "required": ["value"]
    },
    "saslJaasConfig": {
      "type": "object",
      "description": "SASL JAAS config string.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the JAAS config string. For SCRAM-SHA-256 or SCRAM-SHA-512: org.apache.kafka.common.security.scram.ScramLoginModule required username=\"<user>\" password=\"<pass>\"; \n\nFor AWS_MSK_IAM: software.amazon.msk.auth.iam.IAMLoginModule required; and additionalProperties sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler",
          "minLength": 1
        }
      },
      "required": ["value"],
      "multiline": true
    },
    "sslKeystore": {
      "type": "object",
      "description": "Unique keystore (JKS) file name in double quotes. Must end with .jks",
      "properties": {
        "file": {
          "type": "string",
          "description": "Enter a unique keystore (JKS) file name in double quotes. Must end with .jks",
          "pattern": "^.*\\.jks$"
        }
      },
      "required": ["file"]
    },
    "sslKeystorePassword": {
      "type": "object",
      "description": "Keystore password.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter a password for the keystore."
        }
      },
      "required": ["value"]
    },
    "sslKeyPassword": {
      "type": "object",
      "description": "Key password.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter key password (can be empty)."
        }
      },
      "required": ["value"]
    },
    "sslTruststore": {
      "type": "object",
      "description": "Unique truststore (JKS) file name in double quotes. Must end with .jks",
      "properties": {
        "file": {
          "type": "string",
          "description": "Enter a unique truststore (JKS) file name in double quotes. Must end with .jks",
          "pattern": "^.*\\.jks$"
        }
      },
      "required": ["file"]
    },
    "sslTruststorePassword": {
      "type": "object",
      "description": "Truststore password.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter a password for the truststore."
        }
      },
      "required": ["value"]
    },
    "sslAlgorthrim": {
      "type": "object",
      "description": "Name of the SSL algorithm.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the name of the SSL algorithm (non empty).",
          "pattern": "^.+$"
        }
      },
      "default": "X509",
      "required": ["value"]
    },
    "additionalProperties": {
      "type": "object",
      "description": "Additional configuration properties for Kafka client (REQUIRED FOR AWS MSK IAM.",
      "properties": {
        "value": {
          "type": "object",
          "description": "Arbitrary key-value pairs for additional Kafka client properties.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": ["value"]
    },
    "metricsType": {
      "type": "object",
      "description": "Enter the type of metrics to collect (e.g., 'JMX', 'JOLOKIAG', 'JOLOKIAP', 'AWS').",
      "properties": {
        "value": {
          "type": "string",
          "enum": ["JOLOKIAG", "JOLOKIAP", "JMX", "AWS"]
        }
      },
      "required": ["value"]
    },
    "metricsPort": {
      "type": "object",
      "description": "Port for metrics collection.",
      "properties": { "value": { "type": "integer" } },
      "required": ["value"]
    },
    "metricsSsl": {
      "type": "object",
      "description": "Enable SSL for metrics collection.",
      "properties": { "value": { "type": "boolean" } },
      "required": ["value"]
    },
    "metricsUsername": {
      "type": "object",
      "description": "Username for metrics authentication.",
      "properties": { "value": { "type": "string" } },
      "required": ["value"]
    },
    "metricsPassword": {
      "type": "object",
      "description": "Password for metrics authentication.",
      "properties": { "value": { "type": "string" } },
      "required": ["value"]
    },
    "metricsHttpSuffix": {
      "type": "object",
      "description": "Custom HTTP suffix for metrics endpoint.",
      "properties": { "value": { "type": "string" } },
      "required": ["value"]
    },
    "metricsHttpTimeout": {
      "type": "object",
      "description": "HTTP request timeout in milliseconds for metrics collection.",
      "properties": { "value": { "type": "integer" } },
      "required": ["value"]
    },
    "metricsCustomUrlMappings": {
      "type": "object",
      "description": "Map of custom URL mappings for metrics.",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": ["value"]
    },
    "metricsRateLimitingMaxRetries": {
      "type": "object",
      "description": "HTTP retries when 429 is returned for Jolokia metrics",
      "properties": { "value": { "type": "integer" } },
      "required": ["value"]
    },
    "metricsRateLimitingBackoff": {
      "type": "object",
      "description": "Backoff interval (ms) when 429 is returned for Jolokia metrics",
      "properties": { "value": { "type": "integer" } },
      "required": ["value"]
    },
    "username": {
      "type": "object",
      "description": "Username for Basic Auth.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the username (non empty).",
          "pattern": "^.+$"
        }
      }
    },
    "password": {
      "type": "object",
      "description": "Password for Basic Auth.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the password (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["value"]
    },
    "basicAuthCredentialsSource": {
      "type": "object",
      "description": "Source for the basic auth credentials.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter source for the basic auth credentials.",
          "enum": ["URL", "USER_INFO", "SASL_INHERIT"]
        }
      }
    },
    "basicAuthUserInfo": {
      "type": "object",
      "description": "Basic auth user information.",
      "properties": {
        "value": {
          "description": "Enter the basic auth user information (non empty).",
          "type": "string",
          "pattern": "^.+$"
        }
      }
    },
    "accessKeyId": {
      "type": "object",
      "description": "Reference to AWS connection for access key.",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Enter the reference to AWS connection for access key (non empty).",
          "pattern": "^[a-zA-Z0-9-]+$"
        }
      },
      "required": ["reference"]
    },
    "region": {
      "type": "object",
      "description": "AWS region.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the AWS region.",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "af-south-1",
            "ap-east-1",
            "ap-south-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ca-central-1",
            "eu-central-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-south-1",
            "eu-north-1",
            "me-south-1",
            "sa-east-1"
          ]
        }
      },
      "required": ["value"]
    },
    "secretAccessKey": {
      "type": "object",
      "description": "Reference to AWS connection for secret access key.",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Enter the reference to AWS connection for secret access key (non empty).",
          "pattern": "^[a-zA-Z0-9-]+$"
        }
      },
      "required": ["reference"]
    },
    "sessionToken": {
      "type": "object",
      "description": "Specifies the session token value that is required when you are using temporary credentials that you receive from AWS STS.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the session token value (non empty).",
          "pattern": "^[a-zA-Z0-9-]+$"
        }
      },
      "required": ["value"]
    },
    "authMode": {
      "type": "object",
      "description": "Reference to AWS connection for auth mode.",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Enter the reference to AWS connection for auth mode (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["reference"]
    },
    "assumeRoleArn": {
      "type": "object",
      "description": "Reference to AWS connection for assume role ARN.",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Enter the reference to AWS connection (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["reference"]
    },
    "assumeRoleSessionName": {
      "type": "object",
      "description": "Reference to AWS connection for assume role session name.",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Enter the reference to AWS connection (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["reference"]
    },
    "glueRegistryArn": {
      "type": "object",
      "description": "Glue Registry ARN following the format arn:aws:glue:region:account-id:registry-name",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the Glue Registry ARN (non empty).",
          "pattern": "^arn:aws:glue:[a-z0-9-]+:[0-9]{12}:[a-zA-Z0-9._/-]+$"
        }
      },
      "required": ["value"]
    },
    "glueRegistryCacheTtl": {
      "type": "object",
      "description": "The period of time in milliseconds to cache the Schema Registry information, if not set, 24 hours",
      "properties": {
        "value": {
          "type": "integer",
          "description": "Enter the registry cache ttl (non empty).",
          "pattern": "^[0-9]+$"
        }
      },
      "required": ["value"]
    },
    "glueRegistryCacheSize": {
      "type": "object",
      "description": "The cache size for the Schema Registry information.",
      "properties": {
        "value": {
          "type": "integer",
          "description": "Enter the registry cache size (non empty).",
          "pattern": "^[0-9]+$",
          "default": 200
        }
      },
      "required": ["value"]
    },
    "glueRegistryDefaultCompatibility": {
      "type": "object",
      "description": "The default compatibility level for the Schema Registry.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the registry default compatibility (non empty).",
          "enum": [
            "BACKWARD",
            "BACKWARD_ALL",
            "FORWARD",
            "FORWARD_ALL",
            "FULL",
            "FULL_ALL",
            "NONE"
          ]
        }
      },
      "required": ["value"]
    },
    "endpoints": {
      "type": "object",
      "description": "Comma separated list of Alert Manager endpoints.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the Alert Manager endpoints (non empty).",
          "pattern": "^(https?:\\/\\/.+)$",
          "minLength": 1
        }
      },
      "required": ["value"]
    },
    "host": {
      "type": "object",
      "description": "The host name for the Splunk API.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the host value (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["value"]
    },
    "port": {
      "type": "object",
      "description": "The port number.",
      "properties": {
        "value": {
          "type": "integer",
          "description": "Enter the port value.",
          "pattern": "^[0-9]+$"
        }
      },
      "required": ["value"]
    },
    "useHttps": {
      "type": "object",
      "description": "Set to true in order to set the URL scheme to https. Will otherwise default to http.",
      "properties": {
        "value": {
          "type": "boolean",
          "description": "Use HTTPS flag.",
          "pattern": "^true|false$"
        }
      },
      "required": ["value"]
    },
    "insecure": {
      "type": "object",
      "description": "Set to true in order to disable SSL verification.",
      "properties": {
        "value": {
          "type": "boolean",
          "description": "Insecure flag.",
          "pattern": "^true|false$"
        }
      },
      "required": ["value"]
    },
    "token": {
      "type": "object",
      "description": "The token for authentication.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the token value (non empty).",
          "pattern": "^[A-Za-z0-9_-]+$"
        }
      },
      "required": ["value"]
    },
    "hardDelete": {
      "type": "object",
      "description": "If true, delete resources instead of soft-deleting them.",
      "properties": {
        "value": {
          "type": "boolean",
          "description": "Hard delete flag.",
          "pattern": "^true|false$"
        }
      },
      "required": ["value"]
    },
    "webhookUrl": {
      "type": "object",
      "description": "The webhook URL for the Slack API.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the Slack webhook URL (non empty).",
          "pattern": "^(https?:\\/\\/.+)$"
        }
      },
      "required": ["value"]
    },
    "integrationKey": {
      "type": "object",
      "description": "The integration key for authentication.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the integration key value (non empty).",
          "pattern": "^.+$",
          "x-secret": true
        }
      },
      "required": ["value"]
    },
    "site": {
      "type": "object",
      "description": "The site URL for the DataDog API.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the site value (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["value"]
    },
    "apiKey": {
      "type": "object",
      "description": "The API key for authentication.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the API key value (non empty).",
          "pattern": "^.+$",
          "x-secret": true
        }
      },
      "required": ["value"]
    },
    "applicationKey": {
      "type": "object",
      "description": "The application key for authentication.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the application key value (non empty).",
          "pattern": "^.+$",
          "x-secret": true
        }
      },
      "required": ["value"]
    },
    "creds": {
      "type": "object",
      "description": "An array of (secret) strings to be passed over to alert channel plugins.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Enter the credential string (non empty).",
            "pattern": "^.+$"
          },
          "description": "Array of credential strings."
        }
      },
      "required": ["value"]
    },
    "zookeeperUrls": {
      "type": "object",
      "description": "Zookeeper connection URLs.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9.-]+:[0-9]{1,5}$"
          },
          "description": "List of Zookeeper URLs in host:port format."
        }
      },
      "required": ["value"]
    },
    "zookeeperChrootPath": {
      "type": "object",
      "description": "Optional suffix to Zookeeper's connection string.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the Chroot path value."
        }
      },
      "required": ["value"]
    },
    "zookeeperSessionTimeout": {
      "type": "object",
      "description": "Zookeeper session timeout in milliseconds.",
      "properties": {
        "value": {
          "type": "integer",
          "description": "Enter the Timeout value in milliseconds."
        }
      },
      "required": ["value"]
    },
    "zookeeperConnectionTimeout": {
      "type": "object",
      "description": "Zookeeper connection timeout in milliseconds.",
      "properties": {
        "value": {
          "type": "integer",
          "description": "Enter the Timeout value in milliseconds."
        }
      },
      "required": ["value"]
    },
    "server": {
      "type": "object",
      "description": "Lenses HQ server address.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Server address."
        }
      },
      "required": ["value"]
    },
    "agentKey": {
      "type": "object",
      "description": "Agent key for authentication.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Enter the Agent key value (non empty).",
          "pattern": "^.+$"
        }
      },
      "required": ["value"]
    },
    "sslEnabled": {
      "type": "object",
      "description": "Enable SSL for HQ connection.",
      "properties": {
        "value": {
          "type": "boolean",
          "description": "SSL enabled flag.",
          "pattern": "^true|false$"
        }
      },
      "required": ["value"]
    },
    "sslEnabledProtocols": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "title": "LensesHQ SSL Enabled Protocols",
      "description": "The list of SSL/TLS protocols enabled for communication with the LensesHQ server."
    },
    "algorithm": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "title": "LensesHQ SSL algorithm",
      "description": "The SSL algorithm to use when establishing the connection."
    },
    "cipherSuites": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "title": "LensesHQ Cipher Suites",
      "description": "The list of cipher suites supported for encryption in communication with the LensesHQ server."
    },
    "maxBackOffInterval": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      },
      "title": "LensesHQ Max BackOff Interval",
      "description": "The maximum interval for backoff retries in communication with the LensesHQ server."
    },
    "isShutDownInterval": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      },
      "title": "LensesHQ ShutDown Interval",
      "description": "The interval for shutting down the LensesHQ server gracefully."
    },
    "connectTimeout": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      },
      "title": "LensesHQ Connection Timeout",
      "description": "The timeout duration for establishing a connection with the LensesHQ server."
    },
    "maxJitterWindowMilliseconds": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      },
      "title": "LensesHQ Max Jitter Window Milliseconds",
      "description": "The maximum duration of jitter window in milliseconds for retries in communication with the LensesHQ server."
    }
  },
  "properties": {
    "lensesHq": {
      "type": "array",
      "description": "Lenses HQ connection(s).",
      "maxItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Lenses HQ connection name.",
            "enum": ["lenses-hq"],
            "default": "lenses-hq"
          },

          "version": {
            "type": "integer",
            "description": "Lenses HQ connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Lenses HQ connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Lenses HQ connection configuration.",
            "properties": {
              "server": { "$ref": "#/definitions/server" },
              "port": { "$ref": "#/definitions/port" },
              "agentKey": { "$ref": "#/definitions/agentKey" },
              "sslEnabled": { "$ref": "#/definitions/sslEnabled" },
              "sslTruststore": { "$ref": "#/definitions/sslTruststore" },
              "sslTruststorePassword": {
                "$ref": "#/definitions/sslTruststorePassword"
              },
              "maxBackOffInterval": { "$ref": "#/definitions/maxBackOffInterval" },
              "isShutDownInterval": { "$ref": "#/definitions/isShutDownInterval" },
              "connectTimeout": { "$ref": "#/definitions/connectTimeout" },
              "maxJitterWindowMilliseconds": { "$ref": "#/definitions/maxJitterWindowMilliseconds" },
              "sslEnabledProtocols": { "$ref": "#/definitions/sslEnabledProtocols" },
              "algorithm": { "$ref": "#/definitions/algorithm" },
              "cipherSuites": { "$ref": "#/definitions/cipherSuites" }
              
            },
            "required": ["server", "port", "agentKey"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "kafka": {
      "type": "array",
      "description": "A Kafka connection",
      "maxItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Cluster name.",
            "enum": ["kafka"],
            "default": "kafka"
          },

          "version": {
            "type": "integer",
            "description": "Kafka version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this cluster.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Kafka connection configuration.",
            "properties": {
              "kafkaBootstrapServers": {
                "$ref": "#/definitions/kafkaBootstrapServers"
              },
              "protocol": { "$ref": "#/definitions/protocol" },
              "sslKeystore": { "$ref": "#/definitions/sslKeystore" },
              "sslKeystorePassword": {
                "$ref": "#/definitions/sslKeystorePassword"
              },
              "sslKeyPassword": { "$ref": "#/definitions/sslKeyPassword" },
              "sslTruststore": { "$ref": "#/definitions/sslTruststore" },
              "sslTruststorePassword": {
                "$ref": "#/definitions/sslTruststorePassword"
              },
              "saslMechanism": { "$ref": "#/definitions/saslMechanism" },
              "saslJaasConfig": { "$ref": "#/definitions/saslJaasConfig" },
              "additionalProperties": {
                "$ref": "#/definitions/additionalProperties"
              },
              "metricsType": { "$ref": "#/definitions/metricsType" },
              "metricsPort": { "$ref": "#/definitions/metricsPort" },
              "metricsSsl": { "$ref": "#/definitions/metricsSsl" },
              "metricsUsername": { "$ref": "#/definitions/metricsUsername" },
              "metricsPassword": { "$ref": "#/definitions/metricsPassword" },
              "metricsHttpSuffix": {
                "$ref": "#/definitions/metricsHttpSuffix"
              },
              "metricsHttpTimeout": {
                "$ref": "#/definitions/metricsHttpTimeout"
              },
              "metricsCustomUrlMappings": {
                "$ref": "#/definitions/metricsCustomUrlMappings"
              },
              "metricsRateLimitingMaxRetries": {
                " $ref": "#/definitions/metricsRateLimitingMaxRetries"
              },
              "metricsRateLimitingBackoff": {
                "$ref": "#/definitions/metricsRateLimitingBackoff"
              }
            },
            "required": ["kafkaBootstrapServers"],
            "allOf": [
              {
                "if": {
                  "properties": {
                    "saslMechanism": {
                      "properties": {
                        "value": {
                          "const": "PLAIN"
                        }
                      }
                    }
                  },
                  "required": ["saslMechanism", "saslJaasConfig"]
                },
                "then": {
                  "properties": {
                    "saslJaasConfig": {
                      "properties": {
                        "value": {
                          "pattern": "^org\\.apache\\.kafka\\.common\\.security\\.plain\\.PlainLoginModule required username=\\\"[^\\\"]+\\\" password=\\\"[^\\\"]+\\\";$"
                        }
                      }
                    }
                  },
                  "required": ["saslJaasConfig"]
                }
              },
              {
                "if": {
                  "properties": {
                    "saslMechanism": {
                      "properties": {
                        "value": {
                          "const": "AWS_MSK_IAM"
                        }
                      }
                    }
                  },
                  "required": ["saslMechanism"]
                },
                "then": {
                  "required": ["additionalProperties"],
                  "properties": {
                    "additionalProperties": {
                      "properties": {
                        "value": {
                          "type": "object",
                          "properties": {
                            "sasl.client.callback.handler.class": {
                              "type": "string",
                              "const": "software.amazon.msk.auth.iam.IAMClientCallbackHandler"
                            }
                          },
                          "required": ["sasl.client.callback.handler.class"]
                        }
                      }
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "saslMechanism": {
                      "properties": {
                        "value": {
                          "enum": ["SCRAM-SHA-256", "SCRAM-SHA-512"]
                        }
                      }
                    }
                  },
                  "required": ["saslMechanism", "saslJaasConfig"]
                },
                "then": {
                  "properties": {
                    "saslJaasConfig": {
                      "properties": {
                        "value": {
                          "pattern": "^org\\.apache\\.kafka\\.common\\.security\\.scram\\.ScramLoginModule required username=\\\"[^\\\"]+\\\" password=\\\"[^\\\"]+\\\";$"
                        }
                      }
                    }
                  },
                  "required": ["saslJaasConfig"]
                }
              },
              {
                "if": {
                  "properties": {
                    "saslMechanism": {
                      "properties": {
                        "value": {
                          "const": "AWS_MSK_IAM"
                        }
                      }
                    }
                  },
                  "required": ["saslMechanism", "saslJaasConfig"]
                },
                "then": {
                  "properties": {
                    "saslJaasConfig": {
                      "properties": {
                        "value": {
                          "const": "software.amazon.msk.auth.iam.IAMLoginModule required;"
                        }
                      }
                    }
                  },
                  "required": ["saslJaasConfig"]
                }
              },
              {
                "if": {
                  "required": ["sslTruststorePassword"]
                },
                "then": {
                  "required": ["sslTruststore"]
                }
              },
              {
                "if": {
                  "required": ["sslTruststore"]
                },
                "then": {
                  "required": ["sslTruststorePassword"]
                }
              },
              {
                "if": {
                  "required": ["sslKeystorePassword"]
                },
                "then": {
                  "required": ["sslKeystore"]
                }
              },
              {
                "if": {
                  "required": ["sslKeystore"]
                },
                "then": {
                  "required": ["sslKeystorePassword"]
                }
              }
            ]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "zookeeper": {
      "type": "array",
      "description": "Zookeeper cluster.",
      "maxItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Zookeeper name.",
            "enum": ["zookeeper"],
            "default": "zookeeper"
          },

          "version": {
            "type": "integer",
            "description": "Zookeeper version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Zookeeper.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Zookeeper connection configuration.",
            "properties": {
              "zookeeperUrls": { "$ref": "#/definitions/zookeeperUrls" },
              "zookeeperChrootPath": {
                "$ref": "#/definitions/zookeeperChrootPath"
              },
              "zookeeperSessionTimeout": {
                "$ref": "#/definitions/zookeeperSessionTimeout"
              },
              "zookeeperConnectionTimeout": {
                "$ref": "#/definitions/zookeeperConnectionTimeout"
              },
              "metricsType": {
                "type": "object",
                "description": "Enter the type of metrics to collect (e.g., 'JMX', 'JOLOKIAG', 'JOLOKIAP').",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Enter a metrics type value ('JMX', 'JOLOKIAG', 'JOLOKIAP')",
                    "enum": ["JOLOKIAG", "JOLOKIAP", "JMX"]
                  }
                },
                "required": ["value"]
              },
              "metricsType": { "$ref": "#/definitions/metricsType" },
              "metricsPort": { "$ref": "#/definitions/metricsPort" },
              "metricsSsl": { "$ref": "#/definitions/metricsSsl" },
              "metricsUsername": { "$ref": "#/definitions/metricsUsername" },
              "metricsPassword": { "$ref": "#/definitions/metricsPassword" },
              "metricsHttpSuffix": {
                "$ref": "#/definitions/metricsHttpSuffix"
              },
              "metricsHttpTimeout": {
                "$ref": "#/definitions/metricsHttpTimeout"
              },
              "metricsCustomUrlMappings": {
                "$ref": "#/definitions/metricsCustomUrlMappings"
              },
              "metricsRateLimitingMaxRetries": {
                " $ref": "#/definitions/metricsRateLimitingMaxRetries"
              },
              "metricsRateLimitingBackoff": {
                "$ref": "#/definitions/metricsRateLimitingBackoff"
              }
            },
            "required": ["zookeeperUrls"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "confluentSchemaRegistry": {
      "type": "array",
      "description": "A Confluent Schema Registry service.",
      "maxItems": 1,
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Schema Registry name.",
            "enum": ["schema-registry"],
            "default": "schema-registry"
          },

          "version": {
            "type": "integer",
            "description": "Schema Registry version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Schema Registry.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Schema Registry connection configuration.",
            "properties": {
              "schemaRegistryUrls": {
                "$ref": "#/definitions/schemaRegistryUrls"
              },
              "username": { "$ref": "#/definitions/username" },
              "password": { "$ref": "#/definitions/password" },
              "basicAuthCredentialsSource": {
                "$ref": "#/definitions/basicAuthCredentialsSource"
              },
              "basicAuthUserInfo": {
                "$ref": "#/definitions/basicAuthUserInfo"
              },
              "sslKeystore": { "$ref": "#/definitions/sslKeystore" },
              "sslKeystorePassword": {
                "$ref": "#/definitions/sslKeystorePassword"
              },
              "sslKeyPassword": { "$ref": "#/definitions/sslKeyPassword" },
              "sslTruststore": { "$ref": "#/definitions/sslTruststore" },
              "sslTruststorePassword": {
                "$ref": "#/definitions/sslTruststorePassword"
              },
              "additionalProperties": {
                "$ref": "#/definitions/additionalProperties"
              },
              "metricsType": { "$ref": "#/definitions/metricsType" },
              "metricsPort": { "$ref": "#/definitions/metricsPort" },
              "metricsSsl": { "$ref": "#/definitions/metricsSsl" },
              "metricsUsername": { "$ref": "#/definitions/metricsUsername" },
              "metricsPassword": { "$ref": "#/definitions/metricsPassword" },
              "metricsHttpSuffix": {
                "$ref": "#/definitions/metricsHttpSuffix"
              },
              "metricsHttpTimeout": {
                "$ref": "#/definitions/metricsHttpTimeout"
              },
              "metricsCustomUrlMappings": {
                "$ref": "#/definitions/metricsCustomUrlMappings"
              },
              "metricsRateLimitingMaxRetries": {
                "$ref": "#/definitions/metricsRateLimitingMaxRetries"
              },
              "metricsRateLimitingBackoff": {
                "$ref": "#/definitions/metricsRateLimitingBackoff"
              },
              "hardDelete": { "$ref": "#/definitions/hardDelete" }
            },
            "required": ["schemaRegistryUrls"],
            "allOf": [
              {
                "if": {
                  "required": ["sslTruststorePassword"]
                },
                "then": {
                  "required": ["sslTruststore"]
                }
              },
              {
                "if": {
                  "required": ["sslTruststore"]
                },
                "then": {
                  "required": ["sslTruststorePassword"]
                }
              },
              {
                "if": {
                  "required": ["sslKeystorePassword"]
                },
                "then": {
                  "required": ["sslKeystore"]
                }
              },
              {
                "if": {
                  "required": ["sslKeystore"]
                },
                "then": {
                  "required": ["sslKeystorePassword"]
                }
              }
            ],
            "if": {
              "properties": {
                "basicAuthCredentialsSource": {
                  "properties": {
                    "value": {
                      "enum": ["USER_INFO", "URL"]
                    }
                  }
                }
              },
              "required": ["basicAuthCredentialsSource"]
            },
            "then": {
              "required": ["basicAuthUserInfo"]
            }
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "glueSchemaRegistry": {
      "type": "array",
      "description": "A AWS Glue Schema Registry connection",
      "maxItems": 1,
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Glue Schema Registry connection name.",
            "enum": ["schema-registry"],
            "default": "schema-registry"
          },

          "version": {
            "type": "integer",
            "description": "Glue Schema Registry version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Glue Schema Registry.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Glue Schema Registry connection configuration.",
            "properties": {
              "accessKeyId": { "$ref": "#/definitions/accessKeyId" },
              "secretAccessKey": { "$ref": "#/definitions/secretAccessKey" },
              "sessionToken": { "$ref": "#/definitions/sessionToken" },
              "authMode": { "$ref": "#/definitions/authMode" },
              "assumeRoleArn": { "$ref": "#/definitions/assumeRoleArn" },
              "assumeRoleSessionName": {
                "$ref": "#/definitions/assumeRoleSessionName"
              },
              "glueRegistryArn": { "$ref": "#/definitions/glueRegistryArn" },
              "glueRegistryCacheTtl": {
                "$ref": "#/definitions/glueRegistryCacheTtl"
              },
              "glueRegistryCacheSize": {
                "$ref": "#/definitions/glueRegistryCacheSize"
              },
              "glueRegistryDefaultCompatibility": {
                "$ref": "#/definitions/glueRegistryDefaultCompatibility"
              }
            },
            "required": ["authMode", "glueRegistryArn"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "connect": {
      "type": "array",
      "description": "Array of Kafka Connect clusters.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Connect cluster name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "connect"
          },

          "version": {
            "type": "integer",
            "description": "Connect version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Connect cluster.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Kafka Connect connection configuration.",
            "properties": {
              "workers": { "$ref": "#/definitions/workers" },
              "username": { "$ref": "#/definitions/username" },
              "password": { "$ref": "#/definitions/password" },
              "sslKeystore": { "$ref": "#/definitions/sslKeystore" },
              "sslKeystorePassword": {
                "$ref": "#/definitions/sslKeystorePassword"
              },
              "sslKeyPassword": { "$ref": "#/definitions/sslKeyPassword" },
              "sslTruststore": { "$ref": "#/definitions/sslTruststore" },
              "sslTruststorePassword": {
                "$ref": "#/definitions/sslTruststorePassword"
              },
              "sslAlgorthrim": { "$ref": "#/definitions/sslAlgorthrim" },
              "metricsType": { "$ref": "#/definitions/metricsType" },
              "metricsPort": { "$ref": "#/definitions/metricsPort" },
              "metricsSsl": { "$ref": "#/definitions/metricsSsl" },
              "metricsUsername": { "$ref": "#/definitions/metricsUsername" },
              "metricsPassword": { "$ref": "#/definitions/metricsPassword" },
              "metricsHttpSuffix": {
                "$ref": "#/definitions/metricsHttpSuffix"
              },
              "metricsHttpTimeout": {
                "$ref": "#/definitions/metricsHttpTimeout"
              },
              "metricsCustomUrlMappings": {
                "$ref": "#/definitions/metricsCustomUrlMappings"
              },
              "metricsRateLimitingMaxRetries": {
                "$ref": "#/definitions/metricsRateLimitingMaxRetries"
              },
              "metricsRateLimitingBackoff": {
                "$ref": "#/definitions/metricsRateLimitingBackoff"
              }
            },
            "allOf": [
              {
                "if": {
                  "required": ["sslTruststorePassword"]
                },
                "then": {
                  "required": ["sslTruststore"]
                }
              },
              {
                "if": {
                  "required": ["sslTruststore"]
                },
                "then": {
                  "required": ["sslTruststorePassword"]
                }
              },
              {
                "if": {
                  "required": ["sslKeystorePassword"]
                },
                "then": {
                  "required": ["sslKeystore"]
                }
              },
              {
                "if": {
                  "required": ["sslKeystore"]
                },
                "then": {
                  "required": ["sslKeystorePassword"]
                }
              }
            ]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "aws": {
      "type": "array",
      "description": "AWS Connection for Glue & CloudWatch.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "AWS connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "aws"
          },

          "version": {
            "type": "integer",
            "description": "AWS connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this AWS connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "AWS connection configuration.",
            "properties": {
              "accessKeyId": { "$ref": "#/definitions/accessKeyId" },
              "secretAccessKey": { "$ref": "#/definitions/secretAccessKey" },
              "region": { "$ref": "#/definitions/region" },
              "sessionToken": { "$ref": "#/definitions/sessionToken" },
              "authMode": { "$ref": "#/definitions/authMode" },
              "assumeRoleArn": { "$ref": "#/definitions/assumeRoleArn" },
              "assumeRoleSessionName": {
                "$ref": "#/definitions/assumeRoleSessionName"
              }
            },
            "required": ["authMode"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "webhook": {
      "type": "array",
      "description": "Array of Webhook integration for alerts and audits.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Webhook connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "webhook"
          },

          "version": {
            "type": "integer",
            "description": "Webhook connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Webhook connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Webhook connection configuration.",
            "properties": {
              "host": { "$ref": "#/definitions/host" },
              "port": { "$ref": "#/definitions/port" },
              "useHttps": { "$ref": "#/definitions/useHttps" },
              "creds": { "$ref": "#/definitions/creds" }
            },
            "required": ["host", "useHttps"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "datadog": {
      "type": "array",
      "description": "Array of DataDog integration for alerts and audits.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "DataDog connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "datadog"
          },

          "version": {
            "type": "integer",
            "description": "DataDog connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this DataDog connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "DataDog connection configuration.",
            "properties": {
              "site": { "$ref": "#/definitions/site" },
              "apiKey": { "$ref": "#/definitions/apiKey" },
              "applicationKey": { "$ref": "#/definitions/applicationKey" }
            }
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "pagerduty": {
      "type": "array",
      "description": "Array of PagerDuty integration for alerts and audits.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "PagerDuty connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "pagerduty"
          },

          "version": {
            "type": "integer",
            "description": "PagerDuty connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this PagerDuty connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "PagerDuty connection configuration.",
            "properties": {
              "integrationKey": { "$ref": "#/definitions/integrationKey" }
            }
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "slack": {
      "type": "array",
      "description": "Array of Slack integration for alerts and audits.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Slack connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "slack"
          },

          "version": {
            "type": "integer",
            "description": "Slack connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Slack connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Slack connection configuration.",
            "properties": {
              "webhookUrl": { "$ref": "#/definitions/webhookUrl" }
            },
            "required": ["webhookUrl"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "splunk": {
      "type": "array",
      "description": "Array Splunk integration for alerts and audits.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Splunk connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "splunk"
          },

          "version": {
            "type": "integer",
            "description": "Splunk connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Splunk connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Splunk connection configuration.",
            "properties": {
              "host": { "$ref": "#/definitions/host" },
              "port": { "$ref": "#/definitions/port" },
              "useHttps": { "$ref": "#/definitions/useHttps" },
              "insecure": { "$ref": "#/definitions/insecure" },
              "token": { "$ref": "#/definitions/token" }
            }
          }
        },
        "required": ["name", "version", "configuration"]
      }
    },
    "alertmanager": {
      "type": "array",
      "description": "Array of Alert Manager integration for alerts.",
      "default": [],
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Alert Manager connection name. Must start with a letter or number and contain only alphanumeric characters or hyphens.",
            "pattern": "^[a-zA-Z0-9-]+$",
            "default": "my-alertmanager-connection"
          },
          "version": {
            "type": "integer",
            "description": "Alert Manager connection version.",
            "default": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for this Alert Manager connection.",
            "default": []
          },
          "configuration": {
            "type": "object",
            "description": "Alert Manager connection configuration.",
            "properties": {
              "endpoints": { "$ref": "#/definitions/endpoints" }
            },
            "required": ["endpoints"]
          }
        },
        "required": ["name", "version", "configuration"]
      }
    }
  },
  "defaultSnippets": [
    {
      "label": "HQ Connection",
      "body": {
        "## Template": "HQ Connection",
        "lensesHq": [
          {
            "name": "lenses-hq",
            "version": 1,
            "tags": ["hq"],
            "configuration": {
              "server": {
                "value": "<YOUR_LENSES_HQ_SERVER_URL>"
              },
              "port": {
                "value": 10000
              },
              "agentKey": {
                "value": "<LENSES_HQ_AGENT_KEY>"
              }
            }
          }
        ]
      }
    },
    {
      "label": "HQ Connection TLS",
      "body": {
        "## Template": "HQ Connection TLS",
        "lensesHq": [
          {
            "name": "lenses-hq",
            "version": 1,
            "tags": ["hq"],
            "configuration": {
              "server": {
                "value": "<YOUR_LENSES_HQ_SERVER_URL>"
              },
              "port": {
                "value": 10000
              },
              "agentKey": {
                "value": "<LENSES_HQ_AGENT_KEY>"
              },
              "sslEnabled": {
                "value": true
              },
              "sslTruststore": {
                "file": ""
              },
              "sslTruststorePassword": {
                "value": ""
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, Aiven",
      "body": {
        "## Template": "Kafka, Aiven",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "Aiven",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "sslKeystore": {
                "file": ""
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "saslMechanism": {
                "value": "SCRAM-SHA-256"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"\" password=\"\";"
              },
              "additionalProperties": {
                "value": {}
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, AWS MSK, SSL/TLS",
      "body": {
        "## Template": "Kafka, AWS MSK, SSL/TLS",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "AWS MSK, SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SSL"
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": "AWS"
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, AWS MSK, mutal SSL/TLS",
      "body": {
        "## Template": "Kafka, AWS MSK, mutal SSL/TLS",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "AWS MSK, mutal SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": "AWS"
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, AWS MSK, IAM",
      "body": {
        "## Template": "Kafka, AWS MSK, IAM",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "AWS MSK, IAM",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "saslMechanism": {
                "value": "AWS_MSK_IAM"
              },
              "saslJaasConfig": {
                "value": "software.amazon.msk.auth.iam.IAMLoginModule required;"
              },
              "additionalProperties": {
                "value": {
                  "sasl.client.callback.handler.class": "software.amazon.msk.auth.iam.IAMClientCallbackHandler"
                }
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": "AWS"
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, Azure Eventhubs",
      "body": {
        "## Template": "Kafka, Azure Eventhubs",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "Azure Eventhubs",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "saslMechanism": {
                "value": "PLAIN"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"\\$ConnectionString\" password=\"Endpoint=sb://[SB_URL]/;SharedAccessKeyName=[KEY_NAME];SharedAccessKey=[ACCESS_KEY]\";"
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka & Confluent Cloud, SASL_SSL, PLAIN",
      "body": {
        "## Template": "Kafka & Confluent Cloud, SASL_SSL, PLAIN",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "Confluent",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "saslMechanism": {
                "value": "PLAIN"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, IBM Event Streams",
      "body": {
        "## Template": "Kafka, IBM Event Streams",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "IBM Event Streams",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "saslMechanism": {
                "value": "PLAIN"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, Redpanda",
      "body": {
        "## Template": "Kafka, Redpanda",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "Redpanda",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "saslMechanism": {
                "value": "SCRAM-SHA-256"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, PLAINTEXT",
      "body": {
        "## Template": "Kafka, PLAINTEXT",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "PLAINTEXT",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "PLAINTEXT"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SASL_PLAINTEXT, PLAIN",
      "body": {
        "## Template": "Kafka, SASL_PLAINTEXT, PLAIN",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SASL_PLAINTEXT, PLAIN",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_PLAINTEXT"
              },
              "saslMechanism": {
                "value": "PLAIN"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SASL_PLAINTEXT, SCRAM-SHA-256",
      "body": {
        "## Template": "Kafka, SASL_PLAINTEXT, SCRAM-SHA-256",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SASL_PLAINTEXT, SCRAM-SHA-256",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_PLAINTEXT"
              },
              "saslMechanism": {
                "value": "SCRAM-SHA-256"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SASL_PLAINTEXT, SCRAM-SHA-512",
      "body": {
        "## Template": "Kafka, SASL_PLAINTEXT, SCRAM-SHA-512",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SASL_PLAINTEXT, SCRAM-SHA-512",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_PLAINTEXT"
              },
              "saslMechanism": {
                "value": "SCRAM-SHA-512"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SASL_SSL, PLAIN",
      "body": {
        "## Template": "Kafka, SASL_SSL, PLAIN",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SASL_SSL, PLAIN",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "saslMechanism": {
                "value": "PLAIN"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SASL_SSL, SCRAM-SHA-256",
      "body": {
        "## Template": "Kafka, SASL_SSL, SCRAM-SHA-256",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SASL_SSL, SCRAM-SHA-256",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "saslMechanism": {
                "value": "SCRAM-SHA-256"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SASL_SSL, SCRAM-SHA-512",
      "body": {
        "## Template": "Kafka, SASL_SSL, SCRAM-SHA-512",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SASL_SSL, SCRAM-SHA-512",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SASL_SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "saslMechanism": {
                "value": "SCRAM-SHA-512"
              },
              "saslJaasConfig": {
                "value": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"\" password=\"\";"
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, SSL/TLS",
      "body": {
        "## Template": "Kafka, SSL/TLS",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SSL"
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "kafka1:9092": "kafka1_jmx_metrics:9581",
                  "kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka, Mutal SSL/TLS",
      "body": {
        "## Template": "Kafka, Mutal SSL/TLS",
        "kafka": [
          {
            "name": "kafka",
            "x-lenses-ui-tag": "Mutual SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "kafkaBootstrapServers": {
                "value": ["<broker1>:9092", "<broker2>:9092"]
              },
              "protocol": {
                "value": "SSL"
              },
              "sslKeystore": {
                "file": "kafka-keystore.jks"
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "kafka-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka1:9092": "kafka1_jmx_metrics:9581",
                  "# kafka2:9092": "kafka2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Zookeeper",
      "body": {
        "## Template": "Zookeeper",
        "zookeeper": [
          {
            "name": "zookeeper",
            "x-lenses-ui-tag": "Zookeeper",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "zookeeperUrls": {
                "value": ["<host1>:8080", "<host2>:8080"]
              },
              "# zookeeperChrootPath": {
                "# value": ""
              },
              "zookeeperSessionTimeout": {
                "value": 10000
              },
              "zookeeperConnectionTimeout": {
                "value": 10000
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# zookeeper:8080": "zookeeper_jmx_metrics:9581",
                  "# zookeeper2:8080": "zookeeper2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka Connect, No Auth",
      "body": {
        "## Template": "Kafka Connect, No Auth",
        "connect": [
          {
            "## Repeat": "for more clusters",
            "name": "connect",
            "x-lenses-ui-tag": "No Auth",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "workers": {
                "value": ["http://<host1>:8083", "http://<host2>:8083"]
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka_connect_1:8083": "kafka_connect_1_jmx_metrics:9581",
                  "# kafka_connect_2:8083": "kafka_connect_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka Connect, HTTP Basic Auth",
      "body": {
        "## Template": "Kafka Connect, HTTP Basic Auth",
        "connect": [
          {
            "## Repeat": "for more clusters",
            "name": "connect",
            "x-lenses-ui-tag": "HTTP Basic Auth",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "workers": {
                "value": ["http://<host1>:8083", "http://<host2>:8083"]
              },
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka_connect_1:8083": "kafka_connect_1_jmx_metrics:9581",
                  "# kafka_connect_2:8083": "kafka_connect_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka Connect, HTTP Basic Auth, SSL/TLS",
      "body": {
        "## Template": "Kafka Connect, HTTP Basic Auth, SSL/TLS",
        "connect": [
          {
            "## Repeat": "for more clusters",
            "name": "connect",
            "x-lenses-ui-tag": "HTTP Basic Auth, SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "workers": {
                "value": ["http://<host1>:8083", "http://<host2>:8083"]
              },
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "sslTruststore": {
                "file": "connect-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka_connect_1:8083": "kafka_connect_1_jmx_metrics:9581",
                  "# kafka_connect_2:8083": "kafka_connect_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Kafka Connect, HTTP Basic Auth, Mutual SSL/TLS",
      "body": {
        "## Template": "Kafka Connect HTTP Basic Auth, Mutual SSL/TLS",
        "connect": [
          {
            "## Repeat": "for more clusters",
            "name": "connect",
            "x-lenses-ui-tag": "HTTP Basic Auth, Mutual SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "workers": {
                "value": ["http://<host1>:8083", "http://<host2>:8083"]
              },
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "sslKeystore": {
                "file": "connect-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "connect-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# kafka_connect_1:8083": "kafka_connect_1_jmx_metrics:9581",
                  "# kafka_connect_2:8083": "kafka_connect_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, Confluent, No Auth",
      "body": {
        "## Template": "Schema Registry, Confluent, No Auth",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "Confluent No Auth",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["http://<host1>:8081", "http://<host2>:8081"]
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# schema_registry_1:8081": "schema_registry_1_jmx_metrics:9581",
                  "# schema_registry_2:8081": "schema_registry_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, Confluent, Basic Auth",
      "body": {
        "## Template": "Schema Registry, Confluent, Basic Auth",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "Confluent Basic Auth",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["http://<host1>:8081", "http://<host2>:8081"]
              },
              "## Optional basicAuthUserInfo": "USER_INFO",
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# schema_registry_1:8081": "schema_registry_1_jmx_metrics:9581",
                  "# schema_registry_2:8081": "schema_registry_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, Confluent Basic Auth, SSL/TLS",
      "body": {
        "## Template": "Schema Registry, Confluent Basic Auth, SSL/TLS",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "Confluent Basic Auth, SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["http://<host1>:8081", "http://<host2>:8081"]
              },
              "## Optional basicAuthUserInfo": "USER_INFO",
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "sslTruststore": {
                "file": "schema-registry-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# schema_registry_1:8081": "schema_registry_1_jmx_metrics:9581",
                  "# schema_registry_2:8081": "schema_registry_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, Confluent, Basic Auth, Mutual SSL/TLS",
      "body": {
        "## Template": "Schema Registry, Confluent, Basic Auth, Mutual SSL/TLS",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "Confluent Basic Auth, Mutual SSL/TLS",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["http://<host1>:8081", "http://<host2>:8081"]
              },
              "## Optional basicAuthUserInfo": "USER_INFO",
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "sslKeystore": {
                "file": "schema-registry-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "schema-registry-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# schema_registry_1:8081": "schema_registry_1_jmx_metrics:9581",
                  "# schema_registry_2:8081": "schema_registry_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, Aiven (Karpace)",
      "body": {
        "## Template": "Schema Registry, Aiven (Karpace)",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "Aiven (Karpace)",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["http://<host1>:8081", "http://<host2>:8081"]
              },
              "## Optional basicAuthUserInfo": "USER_INFO",
              "username": {
                "value": ""
              },
              "password": {
                "value": ""
              },
              "sslKeystore": {
                "file": "schema-registry-keystore.jks"
              },
              "sslKeystorePassword": {
                "value": ""
              },
              "sslKeyPassword": {
                "value": ""
              },
              "sslTruststore": {
                "file": "schema-registry-truststore.jks"
              },
              "sslTruststorePassword": {
                "value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# schema_registry_1:8081": "schema_registry_1_jmx_metrics:9581",
                  "# schema_registry_2:8081": "schema_registry_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, AWS Glue (Access Keys)",
      "body": {
        "## Template": "Schema Registry, AWS Glue (Access Keys): REQUIRES AWS / CLOUDWATCH CONNECTION",
        "glueSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "AWS Glue (Access Keys)",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "accessKeyId": {
                "reference": "my-aws-connection-name"
              },
              "secretAccessKey": {
                "reference": "my-aws-connection-name"
              },
              "glueRegistryArn": {
                "value": ""
              },
              "## Optional": "Session token",
              "# sessionToken": {
                "# value": ""
              },
              "authMode": {
                "reference": "my-aws-connection-name"
              },
              "## Optional Cache settings": "If ttl (milliseconds) not set default is 24 hours",
              "# glueRegistryCacheTtl": {
                "# value": ""
              },
              "# glueRegistryCacheSize": {
                "# value": 200
              },
              "# glueRegistryDefaultCompatibility": {
                "# value": "FULL"
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, AWS Glue (Credentials chain)",
      "body": {
        "## Template": "Schema Registry, AWS Glue (Credentials chain): REQUIRES AWS / CLOUDWATCH CONNECTION",
        "glueSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "AWS Glue (Credentials chain)",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "glueRegistryArn": {
                "value": ""
              },
              "## Optional": "Session token",
              "# sessionToken": {
                "# value": ""
              },
              "authMode": {
                "reference": "my-aws-connection-name"
              },
              "## Optional Cache settings": "If ttl (milliseconds) not set default is 24 hours",
              "# glueRegistryCacheTtl": {
                "# value": ""
              },
              "# glueRegistryCacheSize": {
                "# value": 200
              },
              "# glueRegistryDefaultCompatibility": {
                "# value": "FULL"
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, AWS Glue (Assume Role)",
      "body": {
        "## Template": "Schema Registry, AWS Glue (Assume Role): REQUIRES AWS / CLOUDWATCH CONNECTION",
        "glueSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "AWS Glue (Assume Role)",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "assumeRoleArn": {
                "reference": "my-aws-connection-name"
              },
              "assumeRoleSessionName": {
                "reference": "my-aws-connection-name"
              },
              "glueRegistryArn": {
                "value": ""
              },
              "## Optional": "Session token",
              "# sessionToken": {
                "# value": ""
              },
              "authMode": {
                "reference": "my-aws-connection-name"
              },
              "## Optional Cache settings": "If ttl (milliseconds) not set default is 24 hours",
              "# glueRegistryCacheTtl": {
                "# value": ""
              },
              "# glueRegistryCacheSize": {
                "# value": 200
              },
              "# glueRegistryDefaultCompatibility": {
                "# value": "FULL"
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, IBM Event Streams",
      "body": {
        "## Template": "Schema Registry, IBM Event Streams",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "IBM Event Streams Registry",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["https://token:<API Key>@<Host>/confluent"]
              }
            }
          }
        ]
      }
    },
    {
      "label": "Schema Registry, ApiCurio",
      "body": {
        "## Template": "Schema Registry, ApiCurio",
        "confluentSchemaRegistry": [
          {
            "name": "schema-registry",
            "x-lenses-ui-tag": "ApiCurio",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "schemaRegistryUrls": {
                "value": ["http://<hostname>:<port>/apis/compact/v6"]
              },
              "## Optional mutual SSL/TLS": "Uncomment the properties below to enable mutual SSL/TLS",
              "# sslKeystore": {
                "# file": "schema-registry-keystore.jks"
              },
              "# sslKeystorePassword": {
                "# value": ""
              },
              "# sslKeyPassword": {
                "# value": ""
              },
              "## Optional SSL/TLS": "Uncomment the properties below",
              "# sslTruststore": {
                "# file": "schema-registry-truststore.jks"
              },
              "# sslTruststorePassword": {
                "# value": ""
              },
              "## Optional JMX metrics": "Uncomment below to enable JMX metrics",
              "# metricsType": {
                "# value": ""
              },
              "# metricsPort": {
                "# value": 9581
              },
              "# metricsSsl": {
                "# value": true
              },
              "# metricsUsername": {
                "# value": ""
              },
              "# metricsPassword": {
                "# value": ""
              },
              "# metricsHttpSuffix": {
                "# value": 30000
              },
              "# metricsHttpTimeout": {
                "# value": 30000
              },
              "# metricsCustomUrlMappings": {
                "# value": {
                  "# schema_registry_1:8081": "schema_registry_1_jmx_metrics:9581",
                  "# schema_registry_2:8081": "schema_registry_2_jmx_metrics:9581"
                }
              },
              "# metricsRateLimitingMaxRetries": {
                "# value": 5
              },
              "# metricsRateLimitingBackoff": {
                "# value": 30000
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts, AWS Connection for Glue & CloudWatchn",
      "body": {
        "## Template": "Alerts, AWS Connection",
        "aws": [
          {
            "## Repeat": "for more connections",
            "name": "my-aws-connection-name",
            "x-lenses-ui-tag": "AWS Connection for Glue & CloudWatch",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "accessKeyId": {
                "value": ""
              },
              "secretAccessKey": {
                "value": ""
              },
              "region": {
                "value": ""
              },
              "sessionToken": {
                "value": ""
              },
              "authMode": {
                "value": ""
              },
              "assumeRoleArn": {
                "value": ""
              },
              "assumeRoleSessionName": {
                "value": ""
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts & Audits, Webhook",
      "body": {
        "## Template": "Alerts & Audits, Webhook",
        "webhook": [
          {
            "## Repeat": "for more connections",
            "name": "webhook",
            "x-lenses-ui-tag": "Webhook",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "host": {
                "value": ""
              },
              "port": {
                "value": 443
              },
              "useHttps": {
                "value": true
              },
              "creds": {
                "value": []
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts, DataDog",
      "body": {
        "## Template": "Alerts,DataDog",
        "datadog": [
          {
            "## Repeat": "for more connections",
            "name": "datadog",
            "x-lenses-ui-tag": "DataDog",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "site": {
                "value": ""
              },
              "apiKey": {
                "value": ""
              },
              "applicationKey": {
                "value": ""
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts, PagerDuty",
      "body": {
        "## Template": "Alerts, PagerDuty",
        "pagerduty": [
          {
            "## Repeat": "for more connections",
            "name": "pagerduty",
            "x-lenses-ui-tag": "PagerDuty",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "integrationKey": {
                "value": ""
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts, Slack",
      "body": {
        "## Template": "Alerts, Slack",
        "slack": [
          {
            "## Repeat": "for more connections",
            "name": "slack",
            "x-lenses-ui-tag": "Slack",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "webhookUrl": {
                "value": ""
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts & Audits, Splunk",
      "body": {
        "## Template": "Alerts & Audits, Splunk",
        "splunk": [
          {
            "## Repeat": "for more connections",
            "name": "splunk",
            "x-lenses-ui-tag": "Splunk",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "host": {
                "value": ""
              },
              "port": {
                "value": 8089
              },
              "useHttps": {
                "value": true
              },
              "insecure": {
                "value": false
              },
              "token": {
                "value": ""
              }
            }
          }
        ]
      }
    },
    {
      "label": "Alerts, Alert Manager",
      "body": {
        "## Template": "Alerts, Alert Manager",
        "alertmanager": [
          {
            "## Repeat": "for more connections",
            "name": "my-alertmanager-connection",
            "x-lenses-ui-tag": "Alert Manager",
            "version": 1,
            "tags": "[]",
            "configuration": {
              "endpoints": {
                "value": ""
              }
            }
          }
        ]
      }
    }
  ],
  "dependencies": {
    "glueSchemaRegistry": ["aws"]
  }
}
