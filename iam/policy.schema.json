{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Lenses IAM Policy Schema",
  "description": "Schema for defining Lenses IAM policies that control access to resources and operations",
  "type": "object",
  "required": ["policy"],
  "properties": {
    "policy": {
      "type": "array",
      "description": "List of policy statements",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": ["effect", "action", "resource"],
        "properties": {
          "sid": {
            "type": "string",
            "description": "Statement identifier"
          },
          "effect": {
            "type": "string",
            "enum": ["allow", "deny"],
            "description": "Whether the statement allows or denies access"
          },
          "action": {
            "type": "array",
            "description": "List of actions that are allowed or denied",
            "items": {
              "type": "string",
              "enum": [
                "administration:CreateConnection",
                "administration:DeleteConnection",
                "administration:GetConnectionDetails",
                "administration:ListConnections",
                "administration:UpdateConnection",
                "administration:GetLensesConfiguration",
                "administration:GetLensesLogs",
                "administration:GetLicenseDetails",
                "administration:ListLicenses",
                "administration:UpdateLicenseDetails",
                "administration:GetSetting",
                "administration:UpdateSetting",
                "alerts:CreateChannel",
                "alerts:DeleteChannel",
                "alerts:GetChannelDetails",
                "alerts:ListChannels",
                "alerts:ToggleChannel",
                "alerts:UpdateChannel",
                "alerts:ListAlertEvents",
                "alerts:CreateAlertRule",
                "alerts:DeleteAlertRule",
                "alerts:GetAlertRuleDetails",
                "alerts:GetChannelRoutes",
                "alerts:ListAlertRules",
                "alerts:ToggleAlertRule",
                "alerts:UpdateAlertRule",
                "alerts:UpdateChannelRoutes",
                "applications:GetApplicationDetails",
                "applications:ListApplicationDependants",
                "applications:ListApplications",
                "applications:RegisterApplication",
                "applications:UnregisterApplication",
                "audit:CreateChannel",
                "audit:DeleteChannel",
                "audit:GetChannelDetails",
                "audit:ListChannels",
                "audit:ToggleChannel",
                "audit:UpdateChannel",
                "audit:DeleteLogs",
                "audit:ListLogs",
                "data-policies:CreatePolicy",
                "data-policies:DeletePolicy",
                "data-policies:GetPolicyDetails",
                "data-policies:ListPolicies",
                "data-policies:UpdatePolicy",
                "environments:AccessEnvironment",
                "environments:CreateEnvironment",
                "environments:DeleteEnvironment",
                "environments:GetEnvironmentDetails",
                "environments:ListEnvironments",
                "environments:UpdateEnvironment",
                "governance:ApproveRequest",
                "governance:CreateRequest",
                "governance:DenyRequest",
                "governance:GetRequestDetails",
                "governance:ListRequests",
                "governance:GetRuleDetails",
                "governance:UpdateRule",
                "iam:CreateGroup",
                "iam:DeleteGroup",
                "iam:GetGroupDetails",
                "iam:ListGroups",
                "iam:UpdateGroup",
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:GetRoleDetails",
                "iam:ListRoles",
                "iam:UpdateRole",
                "iam:CreateServiceAccount",
                "iam:DeleteServiceAccount",
                "iam:GetServiceAccountDetails",
                "iam:ListServiceAccounts",
                "iam:UpdateServiceAccount",
                "iam:CreateUser",
                "iam:DeleteUser",
                "iam:GetUserDetails",
                "iam:ListUsers",
                "iam:UpdateUser",
                "kafka:CreateAcl",
                "kafka:DeleteAcl",
                "kafka:GetAclDetails",
                "kafka:ListAcls",
                "kafka:UpdateAcl",
                "kafka:DeleteConsumerGroup",
                "kafka:GetConsumerGroupDetails",
                "kafka:ListConsumerGroupDependants",
                "kafka:ListConsumerGroups",
                "kafka:UpdateConsumerGroup",
                "kafka:CreateQuota",
                "kafka:DeleteQuota",
                "kafka:GetQuotaDetails",
                "kafka:ListQuotas",
                "kafka:UpdateQuota",
                "kafka:CreateTopic",
                "kafka:DeleteTopic",
                "kafka:DeleteTopicData",
                "kafka:GetTopicDetails",
                "kafka:ListTopicDependants",
                "kafka:ListTopics",
                "kafka:ReadTopicData",
                "kafka:UpdateTopicDetails",
                "kafka:WriteTopicData",
                "kafka-connect:DeployConnector",
                "kafka-connect:GetClusterDetails",
                "kafka-connect:ListClusters",
                "kafka-connect:CreateConnector",
                "kafka-connect:DeleteConnector",
                "kafka-connect:GetConnectorConfiguration",
                "kafka-connect:GetConnectorDetails",
                "kafka-connect:ListConnectorDependants",
                "kafka-connect:ListConnectors",
                "kafka-connect:StartConnector",
                "kafka-connect:StopConnector",
                "kafka-connect:UpdateConnectorConfiguration",
                "kubernetes:GetClusterDetails",
                "kubernetes:ListClusters",
                "kubernetes:DeployApps",
                "kubernetes:ListNamespaces",
                "schemas:GetRegistryConfiguration",
                "schemas:UpdateRegistryConfiguration",
                "schemas:CreateSchema",
                "schemas:DeleteSchema",
                "schemas:GetSchemaDetails",
                "schemas:ListSchemas",
                "schemas:UpdateSchema",
                "sql-streaming:CreateProcessor",
                "sql-streaming:DeleteProcessor",
                "sql-streaming:GetProcessorDetails",
                "sql-streaming:GetProcessorLogs",
                "sql-streaming:GetProcessorSql",
                "sql-streaming:ListProcessorDependants",
                "sql-streaming:ListProcessors",
                "sql-streaming:ScaleProcessor",
                "sql-streaming:StartProcessor",
                "sql-streaming:StopProcessor",
                "sql-streaming:UpdateProcessorSql"
              ]
            }
          },
          "resource": {
            "type": "array",
            "description": "List of resources that the policy applies to",
            "items": {
              "type": "string",
              "pattern": "^(administration:(connection|license|lenses-logs|lenses-configuration|setting|agent)|applications:(external-application)|alerts:(alert|rule|alert-event|alert-channel)|audit:(log|channel)|data-policies:(policy)|environments:(environment)|governance:(request|rule)|iam:(user|group|role|service-account)|kafka-connect:(connector|cluster)|kafka:(topic|acl|quota|consumer-group)|kubernetes:(cluster|namespace)|registry:(registry)|schemas:(schema)|sql-streaming:(sql-processor)):(\\*|[a-zA-Z0-9-/*]+)$",
              "description": "Lenses Resource Name (LRN) in the format service:resource-type:resource-id. Wildcards (*) are allowed in the resource-id part or as a complete resource-id. Environment names can be any valid string."
            }
          },
          "conditions": {
            "type": "object",
            "description": "Conditions that must be met for the policy to take effect",
            "additionalProperties": {
              "type": "string",
              "description": "Condition value"
            }
          }
        }
      }
    }
  },
  "examples": [
    {
      "policy": [
        {
          "sid": "AllowKafkaReadAccess",
          "effect": "Allow",
          "actions": [
            "kafka:ReadTopicData",
            "kafka:ListTopics"
          ],
          "resource": [
            "arn:lenses:kafka:cluster1:topic/*"
          ],
          "conditions": {
            "StringEquals": {
              "lenses:Environment": ["production", "staging"]
            }
          }
        }
      ]
    }
  ],
  "defaultSnippets": [
    {
      "label": "Allow all actions on all resources",
      "body": {
        "Version": "2023-01-01",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": ["*"],
            "Resource": ["*"]
          }
        ]
      }
    },
    {
      "label": "Deny all actions on all resources",
      "body": {
        "Version": "2023-01-01",
        "Statement": [
          {
            "Effect": "Deny",
            "Action": ["*"],
            "Resource": ["*"]
          }
        ]
      }
    },
    {
      "label": "Allow specific actions on specific resources",
      "body": {
        "Version": "2023-01-01",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kafka:ListTopics",
              "kafka:GetTopicDetails"
            ],
            "Resource": [
              "kafka:topic:prod/kafka/my-topic"
            ]
          }
        ]
      }
    },
    {
      "label": "Allow actions with conditions",
      "body": {
        "Version": "2023-01-01",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kafka:ReadTopicData"
            ],
            "Resource": [
              "kafka:topic:prod/kafka/my-topic"
            ],
            "Condition": {
              "StringEquals": {
                "lenses:Environment": ["production"]
              }
            }
          }
        ]
      }
    },
    {
      "label": "Global Connector Operator",
      "description": "Allow connector operations across all environments",
      "body": {
        "policy": [
          {
            "action": [
              "iam:List*",
              "iam:Get*"
            ],
            "resource": "iam:*",
            "effect": "allow"
          },
          {
            "action": [
              "environments:Get*",
              "environments:List*",
              "environments:AccessEnvironment"
            ],
            "resource": "environments:*",
            "effect": "allow"
          },
          {
            "action": [
              "kafka-connect:List*",
              "kafka-connect:GetClusterDetails",
              "kafka-connect:GetConnectorDetails",
              "kafka-connect:StartConnector",
              "kafka-connect:StopConnector"
            ],
            "resource": [
              "kafka-connect:cluster:*/*",
              "kafka-connect:connector:*/*/*"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Topic Access",
      "description": "Allow access to specific topics",
      "body": {
        "policy": [
          {
            "action": [
              "kafka:ListTopics",
              "kafka:GetTopicDetails"
            ],
            "resource": [
              "kafka:topic:${1:environment}/${2:cluster}/${3:topic}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Administration Access",
      "description": "Allow administration operations",
      "body": {
        "policy": [
          {
            "action": [
              "administration:CreateConnection",
              "administration:ListConnections",
              "administration:GetConnectionDetails",
              "administration:UpdateConnection",
              "administration:DeleteConnection"
            ],
            "resource": [
              "administration:connection:${1:environment}/${2:connectionType}/${3:connection}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Alert Management",
      "description": "Allow alert rule management",
      "body": {
        "policy": [
          {
            "action": [
              "alerts:CreateAlertRule",
              "alerts:DeleteAlertRule",
              "alerts:UpdateAlertRule",
              "alerts:ListAlertRules",
              "alerts:GetAlertRuleDetails",
              "alerts:ToggleAlertRule"
            ],
            "resource": [
              "alerts:rule:${1:environment}/Infrastructure/KafkaBrokerDown",
              "alerts:rule:${1:environment}/DataProduced/red-app-going-slow"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Audit Management",
      "description": "Allow audit log management",
      "body": {
        "policy": [
          {
            "action": [
              "audit:ListLogEvents",
              "audit:GetLogEventDetails"
            ],
            "resource": [
              "audit:log:${1:environment}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Data Policy Management",
      "description": "Allow data policy management",
      "body": {
        "policy": [
          {
            "action": [
              "data-policies:CreatePolicy",
              "data-policies:ListPolicies",
              "data-policies:GetPolicyDetails",
              "data-policies:UpdatePolicy",
              "data-policies:DeletePolicy"
            ],
            "resource": [
              "data-policies:policy:${1:environment}/${2:policy}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Environment Management",
      "description": "Allow environment management",
      "body": {
        "policy": [
          {
            "action": [
              "environments:CreateEnvironment",
              "environments:DeleteEvironment",
              "environments:ListEnvironments",
              "environments:UpdateEnvironment",
              "environments:AccessEnvironment"
            ],
            "resource": [
              "environments:environment:${1:environment}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Governance Management",
      "description": "Allow governance request management",
      "body": {
        "policy": [
          {
            "action": [
              "governance:CreateRequest",
              "governance:ListRequests",
              "governance:GetRequestDetails",
              "governance:ApproveRequest",
              "governance:DenyRequest"
            ],
            "resource": [
              "governance:request:${1:environment}/${2:actionType}/*"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "IAM Management",
      "description": "Allow IAM role management",
      "body": {
        "policy": [
          {
            "action": [
              "iam:CreateRole",
              "iam:DeleteRole",
              "iam:UpdateRole",
              "iam:ListRoles",
              "iam:GetRoleDetails"
            ],
            "resource": [
              "iam:role:${1:role}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Kafka Connect Management",
      "description": "Allow Kafka Connect management",
      "body": {
        "policy": [
          {
            "action": [
              "kafka-connect:CreateConnector",
              "kafka-connect:ListConnectors",
              "kafka-connect:GetConnectorConfiguration",
              "kafka-connect:UpdateConnectorConfiguration",
              "kafka-connect:DeleteConnector"
            ],
            "resource": [
              "kafka-connect:connector:${1:environment}/${2:cluster}/${3:connector}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Kafka ACL Management",
      "description": "Allow Kafka ACL management",
      "body": {
        "policy": [
          {
            "action": [
              "kafka:CreateAcl",
              "kafka:GetAclDetails",
              "kafka:UpdateAcl",
              "kafka:DeleteAcl"
            ],
            "resource": [
              "kafka:acl:${1:environment}/${2:cluster}/${3:resourceType}/*"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Kubernetes Management",
      "description": "Allow Kubernetes cluster management",
      "body": {
        "policy": [
          {
            "action": [
              "kubernetes:ListClusters",
              "kubernetes:GetClusterDetails",
              "kubernetes:ListNamespaces",
              "kubernetes:DeployApps"
            ],
            "resource": [
              "kubernetes:cluster:${1:environment}/${2:cluster}",
              "kubernetes:namespace:${1:environment}/${2:cluster}/${3:namespace}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Schema Registry Management",
      "description": "Allow Schema Registry management",
      "body": {
        "policy": [
          {
            "action": [
              "registry:GetRegistryConfiguration",
              "registry:UpdateRegistryConfiguration"
            ],
            "resource": [
              "schemas:registry:${1:environment}/${2:registry}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "Schema Management",
      "description": "Allow schema management",
      "body": {
        "policy": [
          {
            "action": [
              "schemas:CreateSchema",
              "schemas:DeleteSchema",
              "schemas:UpdateSchema",
              "schemas:GetSchemaDetails",
              "schemas:ListSchemas"
            ],
            "resource": [
              "schemas:schema:${1:environment}/${2:registry}/${3:schema}"
            ],
            "effect": "allow"
          }
        ]
      }
    },
    {
      "label": "SQL Streaming Management",
      "description": "Allow SQL processor management",
      "body": {
        "policy": [
          {
            "action": [
              "sql-streaming:CreateProcessor",
              "sql-streaming:ListProcessors",
              "sql-streaming:GetProcessorDetails",
              "sql-streaming:GetProcessorSql",
              "sql-streaming:UpdateProcessorSql",
              "sql-streaming:DeleteProcessor",
              "sql-streaming:StartProcessor",
              "sql-streaming:StopProcessor",
              "sql-streaming:ScaleProcessor"
            ],
            "resource": [
              "sql-streaming:sql-processor:${1:environment}/${2:cluster}/${3:namespace}/${4:processor}"
            ],
            "effect": "allow"
          }
        ]
      }
    }
  ]
}
