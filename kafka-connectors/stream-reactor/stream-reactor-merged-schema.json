{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "oneOf": [
    {
      "$ref": "with-overrides/AzureServiceBusSource.schema.json"
    },
    {
      "$ref": "with-overrides/JMSSource.schema.json"
    },
    {
      "$ref": "with-overrides/S3Source.schema.json"
    },
    {
      "$ref": "with-overrides/JMSSink.schema.json"
    },
    {
      "$ref": "with-overrides/MqttSource.schema.json"
    },
    {
      "$ref": "with-overrides/MongoSink.schema.json"
    },
    {
      "$ref": "with-overrides/S3ConsumerGroupsSink.schema.json"
    },
    {
      "$ref": "with-overrides/MqttSink.schema.json"
    },
    {
      "$ref": "with-overrides/GCPStorageSource.schema.json"
    },
    {
      "$ref": "with-overrides/AzureEventHubsSource.schema.json"
    },
    {
      "$ref": "with-overrides/ElasticSink.schema.json"
    },
    {
      "$ref": "with-overrides/DatalakeSink.schema.json"
    },
    {
      "$ref": "with-overrides/S3Sink.schema.json"
    },
    {
      "$ref": "with-overrides/HttpSink.schema.json"
    },
    {
      "$ref": "with-overrides/GCPPubSubSource.schema.json"
    },
    {
      "$ref": "with-overrides/AzureServiceBusSink.schema.json"
    },
    {
      "$ref": "with-overrides/CassandraSink.schema.json"
    },
    {
      "$ref": "with-overrides/RedisSink.schema.json"
    },
    {
      "$ref": "with-overrides/InfluxSink.schema.json"
    },
    {
      "$ref": "with-overrides/CosmosDbSink.schema.json"
    },
    {
      "$ref": "with-overrides/GCPStorageSink.schema.json"
    },
    {
      "$ref": "with-overrides/CassandraSource.schema.json"
    }
  ],
  "defaultSnippets": [
    {
      "label": "Connector: Azure Service Bus Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.servicebus.source.AzureServiceBusSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.servicebus.connection.string": "",
        "connect.servicebus.kcql": ""
      }
    },
    {
      "label": "Connector: Azure Service Bus Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.servicebus.source.AzureServiceBusSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.servicebus.source.task.records.queue.size": 5000,
        "connect.servicebus.connection.string": "",
        "connect.servicebus.kcql": "",
        "connect.servicebus.source.prefetch.count": 1000,
        "connect.servicebus.source.complete.retries.max": 3,
        "connect.servicebus.source.complete.retries.min.backoff.ms": 1000,
        "connect.servicebus.source.sleep.on.empty.poll.ms": 250,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: JMSSource - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.jms.source.JMSSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.jms.url": "",
        "connect.jms.initial.context.factory": "",
        "connect.jms.connection.factory": "ConnectionFactory",
        "connect.jms.kcql": "",
        "connect.jms.subscription.name": "",
        "connect.jms.password": "",
        "connect.jms.username": "",
        "connect.jms.error.policy": "THROW",
        "connect.jms.source.default.converter": "",
        "connect.jms.sink.default.converter": "",
        "connect.jms.converter.throw.on.error": false,
        "avro.schemas": ""
      }
    },
    {
      "label": "Connector: JMSSource - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.jms.source.JMSSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.jms.url": "",
        "connect.jms.initial.context.factory": "",
        "connect.jms.connection.factory": "ConnectionFactory",
        "connect.jms.kcql": "",
        "connect.jms.subscription.name": "",
        "connect.jms.password": "",
        "connect.jms.username": "",
        "connect.jms.error.policy": "THROW",
        "connect.jms.retry.interval": 60000,
        "connect.jms.max.retries": 20,
        "connect.jms.destination.selector": "CDI",
        "connect.jms.initial.context.extra.params": [],
        "connect.jms.batch.size": 100,
        "connect.jms.polling.timeout": 1000,
        "connect.jms.source.default.converter": "",
        "connect.jms.sink.default.converter": "",
        "connect.jms.converter.throw.on.error": false,
        "avro.schemas": "",
        "connect.jms.headers": "",
        "connect.progress.enabled": false,
        "connect.jms.evict.interval.minutes": 10,
        "connect.jms.evict.threshold.minutes": 10,
        "connect.jms.scale.type": "kcql",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: S3Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.aws.s3.source.S3SourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.s3.aws.region": "",
        "connect.s3.aws.access.key": "[hidden]",
        "connect.s3.aws.secret.key": "[hidden]",
        "connect.s3.aws.auth.mode": "Default",
        "connect.s3.error.policy": "THROW",
        "connect.s3.kcql": ""
      }
    },
    {
      "label": "Connector: S3Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.aws.s3.source.S3SourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.s3.aws.region": "",
        "connect.s3.aws.access.key": "[hidden]",
        "connect.s3.aws.secret.key": "[hidden]",
        "connect.s3.aws.auth.mode": "Default",
        "connect.s3.custom.endpoint": "",
        "connect.s3.vhost.bucket": false,
        "connect.s3.http.max.retries": 5,
        "connect.s3.http.retry.interval": 50,
        "connect.s3.http.socket.timeout": 60000,
        "connect.s3.http.connection.timeout": 60000,
        "connect.s3.pool.max.connections": -1,
        "connect.s3.compression.codec": "UNCOMPRESSED",
        "connect.s3.compression.level": -1,
        "connect.s3.delete.mode": "BatchDelete",
        "connect.s3.log.metrics": false,
        "connect.s3.max.retries": 20,
        "connect.s3.retry.interval": 60000,
        "connect.s3.error.policy": "THROW",
        "connect.s3.kcql": "",
        "connect.s3.ordering.type": "AlphaNumeric",
        "connect.s3.source.partition.search.recurse.levels": 0,
        "connect.s3.source.partition.search.continuous": true,
        "connect.s3.source.partition.search.interval": 300000,
        "connect.s3.source.partition.search.excludes": ".indexes",
        "connect.s3.source.partition.extractor.type": "",
        "connect.s3.source.partition.extractor.regex": "",
        "connect.s3.source.extension.excludes": "",
        "connect.s3.source.extension.includes": "",
        "connect.s3.source.empty.results.backoff.initial.delay": 1000,
        "connect.s3.source.empty.results.backoff.max.delay": 10000,
        "connect.s3.source.empty.results.backoff.multiplier": 2.0,
        "connect.s3.source.write.watermark.headers": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: JMSSink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.jms.sink.JMSSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.jms.url": "",
        "connect.jms.initial.context.factory": "",
        "connect.jms.connection.factory": "ConnectionFactory",
        "connect.jms.kcql": "",
        "connect.jms.subscription.name": "",
        "connect.jms.password": "",
        "connect.jms.username": "",
        "connect.jms.error.policy": "THROW",
        "connect.jms.source.default.converter": "",
        "connect.jms.sink.default.converter": "",
        "connect.jms.converter.throw.on.error": false,
        "avro.schemas": ""
      }
    },
    {
      "label": "Connector: JMSSink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.jms.sink.JMSSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.jms.url": "",
        "connect.jms.initial.context.factory": "",
        "connect.jms.connection.factory": "ConnectionFactory",
        "connect.jms.kcql": "",
        "connect.jms.subscription.name": "",
        "connect.jms.password": "",
        "connect.jms.username": "",
        "connect.jms.error.policy": "THROW",
        "connect.jms.retry.interval": 60000,
        "connect.jms.max.retries": 20,
        "connect.jms.destination.selector": "CDI",
        "connect.jms.initial.context.extra.params": [],
        "connect.jms.batch.size": 100,
        "connect.jms.polling.timeout": 1000,
        "connect.jms.source.default.converter": "",
        "connect.jms.sink.default.converter": "",
        "connect.jms.converter.throw.on.error": false,
        "avro.schemas": "",
        "connect.jms.headers": "",
        "connect.progress.enabled": false,
        "connect.jms.evict.interval.minutes": 10,
        "connect.jms.evict.threshold.minutes": 10,
        "connect.jms.scale.type": "kcql",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Mqtt Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.mqtt.source.MqttSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.mqtt.hosts": "",
        "connect.mqtt.username": "",
        "connect.mqtt.password": "",
        "connect.mqtt.kcql": "",
        "connect.mqtt.converter.throw.on.error": false,
        "connect.converter.avro.schemas": ""
      }
    },
    {
      "label": "Connector: Mqtt Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.mqtt.source.MqttSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.mqtt.hosts": "",
        "connect.mqtt.username": "",
        "connect.mqtt.password": "",
        "connect.mqtt.service.quality": 0,
        "connect.mqtt.timeout": 3000,
        "connect.mqtt.clean": true,
        "connect.mqtt.keep.alive": 5000,
        "connect.mqtt.client.id": "",
        "connect.mqtt.ssl.ca.cert": "",
        "connect.mqtt.ssl.cert": "",
        "connect.mqtt.ssl.key": "",
        "connect.mqtt.kcql": "",
        "connect.progress.enabled": false,
        "connect.mqtt.converter.throw.on.error": false,
        "connect.converter.avro.schemas": "",
        "connect.mqtt.polling.timeout": 1000,
        "connect.mqtt.share.replicate": false,
        "connect.mqtt.log.message": false,
        "connect.mqtt.process.duplicates": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Mongo Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.mongodb.sink.MongoSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.mongo.connection": "",
        "connect.mongo.db": "",
        "connect.mongo.kcql": "",
        "connect.mongo.error.policy": "THROW",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.location": "",
        "ssl.truststore.password": ""
      }
    },
    {
      "label": "Connector: Mongo Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.mongodb.sink.MongoSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.mongo.connection": "",
        "connect.mongo.db": "",
        "connect.mongo.username": "",
        "connect.mongo.password": "[hidden]",
        "connect.mongo.auth.mechanism": "SCRAM-SHA-1",
        "connect.mongo.kcql": "",
        "connect.mongo.json_datetime_fields": [],
        "connect.mongo.error.policy": "THROW",
        "connect.mongo.max.retries": 20,
        "connect.mongo.retry.interval": 60000,
        "connect.progress.enabled": false,
        "ssl.protocol": "TLSv1.3",
        "ssl.provider": "",
        "ssl.cipher.suites": [],
        "ssl.enabled.protocols": [
          "TLSv1.2",
          "TLSv1.3"
        ],
        "ssl.keystore.type": "JKS",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.type": "JKS",
        "ssl.truststore.location": "",
        "ssl.truststore.password": "",
        "ssl.keymanager.algorithm": "SunX509",
        "ssl.trustmanager.algorithm": "PKIX",
        "ssl.endpoint.identification.algorithm": "https",
        "ssl.secure.random.implementation": "",
        "ssl.engine.factory.class": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: S3Consumer Groups Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.aws.s3.sink.S3ConsumerGroupsSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.s3.location": "",
        "connect.s3.aws.region": "",
        "connect.s3.aws.access.key": "[hidden]",
        "connect.s3.aws.secret.key": "[hidden]",
        "connect.s3.aws.auth.mode": "Default"
      }
    },
    {
      "label": "Connector: S3Consumer Groups Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.aws.s3.sink.S3ConsumerGroupsSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.s3.location": "",
        "connect.s3.aws.region": "",
        "connect.s3.aws.access.key": "[hidden]",
        "connect.s3.aws.secret.key": "[hidden]",
        "connect.s3.aws.auth.mode": "Default",
        "connect.s3.custom.endpoint": "",
        "connect.s3.vhost.bucket": false,
        "connect.s3.http.max.retries": 5,
        "connect.s3.http.retry.interval": 50,
        "connect.s3.http.socket.timeout": 60000,
        "connect.s3.http.connection.timeout": 60000,
        "connect.s3.pool.max.connections": -1,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Mqtt Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.mqtt.sink.MqttSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.mqtt.hosts": "",
        "connect.mqtt.username": "",
        "connect.mqtt.password": "",
        "connect.mqtt.kcql": "",
        "connect.mqtt.converter.throw.on.error": false,
        "connect.converter.avro.schemas": "",
        "connect.mqtt.error.policy": "THROW"
      }
    },
    {
      "label": "Connector: Mqtt Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.mqtt.sink.MqttSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.mqtt.hosts": "",
        "connect.mqtt.username": "",
        "connect.mqtt.password": "",
        "connect.mqtt.service.quality": 0,
        "connect.mqtt.timeout": 3000,
        "connect.mqtt.clean": true,
        "connect.mqtt.keep.alive": 5000,
        "connect.mqtt.client.id": "",
        "connect.mqtt.ssl.ca.cert": "",
        "connect.mqtt.ssl.cert": "",
        "connect.mqtt.ssl.key": "",
        "connect.mqtt.kcql": "",
        "connect.progress.enabled": false,
        "connect.mqtt.converter.throw.on.error": false,
        "connect.converter.avro.schemas": "",
        "connect.mqtt.error.policy": "THROW",
        "connect.mqtt.retry.interval": 60000,
        "connect.mqtt.max.retries": 20,
        "connect.mqtt.retained.messages": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: GCPStorage Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.gcp.storage.source.GCPStorageSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.gcpstorage.error.policy": "THROW",
        "connect.gcpstorage.gcp.project.id": "",
        "connect.gcpstorage.gcp.quota.project.id": "",
        "connect.gcpstorage.gcp.auth.mode": "DEFAULT",
        "connect.gcpstorage.gcp.credentials": "[hidden]",
        "connect.gcpstorage.gcp.file": "",
        "connect.gcpstorage.kcql": ""
      }
    },
    {
      "label": "Connector: GCPStorage Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.gcp.storage.source.GCPStorageSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.gcpstorage.error.policy": "THROW",
        "connect.gcpstorage.max.retries": 20,
        "connect.gcpstorage.retry.interval": 60000,
        "connect.gcpstorage.compression.codec": "UNCOMPRESSED",
        "connect.gcpstorage.compression.level": -1,
        "connect.gcpstorage.gcp.project.id": "",
        "connect.gcpstorage.gcp.quota.project.id": "",
        "connect.gcpstorage.endpoint": "",
        "connect.gcpstorage.http.max.retries": 36,
        "connect.gcpstorage.http.retry.interval": 500,
        "connect.gcpstorage.http.retry.timeout.multiplier": 3.0,
        "connect.gcpstorage.gcp.auth.mode": "DEFAULT",
        "connect.gcpstorage.gcp.credentials": "[hidden]",
        "connect.gcpstorage.gcp.file": "",
        "connect.gcpstorage.kcql": "",
        "connect.gcpstorage.ordering.type": "AlphaNumeric",
        "connect.gcpstorage.source.partition.search.recurse.levels": 0,
        "connect.gcpstorage.source.partition.search.continuous": true,
        "connect.gcpstorage.source.partition.search.interval": 300000,
        "connect.gcpstorage.source.partition.search.excludes": ".indexes",
        "connect.gcpstorage.source.partition.extractor.type": "",
        "connect.gcpstorage.source.partition.extractor.regex": "",
        "connect.gcpstorage.source.extension.excludes": "",
        "connect.gcpstorage.source.extension.includes": "",
        "connect.gcpstorage.source.empty.results.backoff.initial.delay": 1000,
        "connect.gcpstorage.source.empty.results.backoff.max.delay": 10000,
        "connect.gcpstorage.source.empty.results.backoff.multiplier": 2.0,
        "connect.gcpstorage.source.write.watermark.headers": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Azure Event Hubs Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.eventhubs.source.AzureEventHubsSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.eventhubs.source.connection.settings.bootstrap.servers": [],
        "connect.eventhubs.source.connection.settings.session.timeout.ms": 45000,
        "connect.eventhubs.source.connection.settings.heartbeat.interval.ms": 3000,
        "connect.eventhubs.source.connection.settings.max.partition.fetch.bytes": 1048576,
        "connect.eventhubs.source.connection.settings.fetch.min.bytes": 1,
        "connect.eventhubs.source.connection.settings.group.protocol": "classic",
        "connect.eventhubs.source.connection.settings.ssl.keystore.location": "",
        "connect.eventhubs.source.connection.settings.ssl.keystore.password": "",
        "connect.eventhubs.source.connection.settings.ssl.key.password": "",
        "connect.eventhubs.source.connection.settings.ssl.keystore.key": "",
        "connect.eventhubs.source.connection.settings.ssl.keystore.certificate.chain": "",
        "connect.eventhubs.source.connection.settings.ssl.truststore.certificates": "",
        "connect.eventhubs.source.connection.settings.ssl.truststore.location": "",
        "connect.eventhubs.source.connection.settings.ssl.truststore.password": "",
        "connect.eventhubs.kcql": ""
      }
    },
    {
      "label": "Connector: Azure Event Hubs Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.eventhubs.source.AzureEventHubsSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.eventhubs.source.connection.settings.bootstrap.servers": [],
        "connect.eventhubs.source.connection.settings.client.dns.lookup": "use_all_dns_ips",
        "connect.eventhubs.source.connection.settings.group.instance.id": "",
        "connect.eventhubs.source.connection.settings.session.timeout.ms": 45000,
        "connect.eventhubs.source.connection.settings.heartbeat.interval.ms": 3000,
        "connect.eventhubs.source.connection.settings.partition.assignment.strategy": [
          "org.apache.kafka.clients.consumer.RangeAssignor",
          "org.apache.kafka.clients.consumer.CooperativeStickyAssignor"
        ],
        "connect.eventhubs.source.connection.settings.metadata.max.age.ms": 300000,
        "connect.eventhubs.source.connection.settings.auto.commit.interval.ms": 5000,
        "connect.eventhubs.source.connection.settings.client.rack": "",
        "connect.eventhubs.source.connection.settings.max.partition.fetch.bytes": 1048576,
        "connect.eventhubs.source.connection.settings.send.buffer.bytes": 131072,
        "connect.eventhubs.source.connection.settings.receive.buffer.bytes": 65536,
        "connect.eventhubs.source.connection.settings.fetch.min.bytes": 1,
        "connect.eventhubs.source.connection.settings.fetch.max.bytes": 52428800,
        "connect.eventhubs.source.connection.settings.fetch.max.wait.ms": 500,
        "connect.eventhubs.source.connection.settings.reconnect.backoff.ms": 50,
        "connect.eventhubs.source.connection.settings.reconnect.backoff.max.ms": 1000,
        "connect.eventhubs.source.connection.settings.retry.backoff.ms": 100,
        "connect.eventhubs.source.connection.settings.retry.backoff.max.ms": 1000,
        "connect.eventhubs.source.connection.settings.enable.metrics.push": true,
        "connect.eventhubs.source.connection.settings.auto.offset.reset": "latest",
        "connect.eventhubs.source.connection.settings.check.crcs": true,
        "connect.eventhubs.source.connection.settings.metrics.sample.window.ms": 30000,
        "connect.eventhubs.source.connection.settings.metrics.num.samples": 2,
        "connect.eventhubs.source.connection.settings.metrics.recording.level": "INFO",
        "connect.eventhubs.source.connection.settings.metric.reporters": [],
        "connect.eventhubs.source.connection.settings.auto.include.jmx.reporter": true,
        "connect.eventhubs.source.connection.settings.request.timeout.ms": 30000,
        "connect.eventhubs.source.connection.settings.default.api.timeout.ms": 60000,
        "connect.eventhubs.source.connection.settings.socket.connection.setup.timeout.ms": 10000,
        "connect.eventhubs.source.connection.settings.socket.connection.setup.timeout.max.ms": 30000,
        "connect.eventhubs.source.connection.settings.connections.max.idle.ms": 540000,
        "connect.eventhubs.source.connection.settings.interceptor.classes": [],
        "connect.eventhubs.source.connection.settings.max.poll.records": 500,
        "connect.eventhubs.source.connection.settings.max.poll.interval.ms": 300000,
        "connect.eventhubs.source.connection.settings.exclude.internal.topics": true,
        "connect.eventhubs.source.connection.settings.internal.leave.group.on.close": true,
        "connect.eventhubs.source.connection.settings.internal.throw.on.fetch.stable.offset.unsupported": false,
        "connect.eventhubs.source.connection.settings.isolation.level": "read_uncommitted",
        "connect.eventhubs.source.connection.settings.allow.auto.create.topics": true,
        "connect.eventhubs.source.connection.settings.group.protocol": "classic",
        "connect.eventhubs.source.connection.settings.group.remote.assignor": "",
        "connect.eventhubs.source.connection.settings.security.providers": "",
        "connect.eventhubs.source.connection.settings.security.protocol": "PLAINTEXT",
        "connect.eventhubs.source.connection.settings.ssl.protocol": "TLSv1.3",
        "connect.eventhubs.source.connection.settings.ssl.provider": "",
        "connect.eventhubs.source.connection.settings.ssl.cipher.suites": [],
        "connect.eventhubs.source.connection.settings.ssl.enabled.protocols": [
          "TLSv1.2",
          "TLSv1.3"
        ],
        "connect.eventhubs.source.connection.settings.ssl.keystore.type": "JKS",
        "connect.eventhubs.source.connection.settings.ssl.keystore.location": "",
        "connect.eventhubs.source.connection.settings.ssl.keystore.password": "",
        "connect.eventhubs.source.connection.settings.ssl.key.password": "",
        "connect.eventhubs.source.connection.settings.ssl.keystore.key": "",
        "connect.eventhubs.source.connection.settings.ssl.keystore.certificate.chain": "",
        "connect.eventhubs.source.connection.settings.ssl.truststore.certificates": "",
        "connect.eventhubs.source.connection.settings.ssl.truststore.type": "JKS",
        "connect.eventhubs.source.connection.settings.ssl.truststore.location": "",
        "connect.eventhubs.source.connection.settings.ssl.truststore.password": "",
        "connect.eventhubs.source.connection.settings.ssl.keymanager.algorithm": "SunX509",
        "connect.eventhubs.source.connection.settings.ssl.trustmanager.algorithm": "PKIX",
        "connect.eventhubs.source.connection.settings.ssl.endpoint.identification.algorithm": "https",
        "connect.eventhubs.source.connection.settings.ssl.secure.random.implementation": "",
        "connect.eventhubs.source.connection.settings.ssl.engine.factory.class": "",
        "connect.eventhubs.source.connection.settings.sasl.kerberos.service.name": "",
        "connect.eventhubs.source.connection.settings.sasl.kerberos.kinit.cmd": "/usr/bin/kinit",
        "connect.eventhubs.source.connection.settings.sasl.kerberos.ticket.renew.window.factor": 0.8,
        "connect.eventhubs.source.connection.settings.sasl.kerberos.ticket.renew.jitter": 0.05,
        "connect.eventhubs.source.connection.settings.sasl.kerberos.min.time.before.relogin": 60000,
        "connect.eventhubs.source.connection.settings.sasl.login.refresh.window.factor": 0.8,
        "connect.eventhubs.source.connection.settings.sasl.login.refresh.window.jitter": 0.05,
        "connect.eventhubs.source.connection.settings.sasl.login.refresh.min.period.seconds": "60",
        "connect.eventhubs.source.connection.settings.sasl.login.refresh.buffer.seconds": "300",
        "connect.eventhubs.source.connection.settings.sasl.mechanism": "GSSAPI",
        "connect.eventhubs.source.connection.settings.sasl.jaas.config": "",
        "connect.eventhubs.source.connection.settings.sasl.client.callback.handler.class": "",
        "connect.eventhubs.source.connection.settings.sasl.login.callback.handler.class": "",
        "connect.eventhubs.source.connection.settings.sasl.login.class": "",
        "connect.eventhubs.source.connection.settings.sasl.login.connect.timeout.ms": 0,
        "connect.eventhubs.source.connection.settings.sasl.login.read.timeout.ms": 0,
        "connect.eventhubs.source.connection.settings.sasl.login.retry.backoff.max.ms": 10000,
        "connect.eventhubs.source.connection.settings.sasl.login.retry.backoff.ms": 100,
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.scope.claim.name": "scope",
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.sub.claim.name": "sub",
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.token.endpoint.url": "",
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.jwks.endpoint.url": "",
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.jwks.endpoint.refresh.ms": 3600000,
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms": 10000,
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.jwks.endpoint.retry.backoff.ms": 100,
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.clock.skew.seconds": 30,
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.expected.audience": [],
        "connect.eventhubs.source.connection.settings.sasl.oauthbearer.expected.issuer": "",
        "connect.eventhubs.source.close.timeout": 30,
        "connect.eventhubs.source.default.offset": "earliest",
        "connect.eventhubs.kcql": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Elastic Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.elastic7.ElasticSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.elastic.hosts": "localhost",
        "connect.elastic.port": 9300,
        "connect.elastic.tableprefix": "",
        "connect.elastic.cluster.name": "elasticsearch",
        "connect.elastic.error.policy": "THROW",
        "connect.elastic.kcql": "",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.location": "",
        "ssl.truststore.password": ""
      }
    },
    {
      "label": "Connector: Elastic Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.elastic7.ElasticSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.elastic.protocol": "http",
        "connect.elastic.hosts": "localhost",
        "connect.elastic.port": 9300,
        "connect.elastic.tableprefix": "",
        "connect.elastic.cluster.name": "elasticsearch",
        "connect.elastic.write.timeout": 300000,
        "connect.elastic.batch.size": 4000,
        "connect.elastic.use.http.username": "",
        "connect.elastic.use.http.password": "",
        "connect.elastic.error.policy": "THROW",
        "connect.elastic.max.retries": 20,
        "connect.elastic.retry.interval": 60000,
        "connect.elastic.kcql": "",
        "connect.elastic.pk.separator": "-",
        "connect.progress.enabled": false,
        "ssl.protocol": "TLSv1.3",
        "ssl.provider": "",
        "ssl.cipher.suites": [],
        "ssl.enabled.protocols": [
          "TLSv1.2",
          "TLSv1.3"
        ],
        "ssl.keystore.type": "JKS",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.type": "JKS",
        "ssl.truststore.location": "",
        "ssl.truststore.password": "",
        "ssl.keymanager.algorithm": "SunX509",
        "ssl.trustmanager.algorithm": "PKIX",
        "ssl.endpoint.identification.algorithm": "https",
        "ssl.secure.random.implementation": "",
        "ssl.engine.factory.class": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Datalake Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.datalake.sink.DatalakeSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.datalake.error.policy": "THROW",
        "connect.datalake.azure.auth.mode": "Default",
        "connect.datalake.azure.account.name": "",
        "connect.datalake.azure.account.key": "[hidden]",
        "connect.datalake.azure.connection.string": "[hidden]",
        "connect.datalake.kcql": ""
      }
    },
    {
      "label": "Connector: Datalake Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.datalake.sink.DatalakeSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.datalake.endpoint": "",
        "connect.datalake.error.policy": "THROW",
        "connect.datalake.max.retries": 20,
        "connect.datalake.retry.interval": 60000,
        "connect.datalake.http.max.retries": 5,
        "connect.datalake.http.socket.timeout": 60000,
        "connect.datalake.http.connection.timeout": 60000,
        "connect.datalake.pool.max.connections": -1,
        "connect.datalake.compression.codec": "UNCOMPRESSED",
        "connect.datalake.compression.level": -1,
        "connect.datalake.azure.auth.mode": "Default",
        "connect.datalake.azure.account.name": "",
        "connect.datalake.azure.account.key": "[hidden]",
        "connect.datalake.azure.connection.string": "[hidden]",
        "connect.datalake.kcql": "",
        "connect.datalake.disable.flush.count": false,
        "connect.datalake.log.metrics": false,
        "connect.datalake.local.tmp.directory": "",
        "connect.datalake.padding.strategy": "",
        "connect.datalake.padding.length": -1,
        "connect.datalake.seek.max.files": 5,
        "connect.datalake.indexes.name": ".indexes",
        "connect.datalake.exactly.once.enable": true,
        "connect.datalake.schema.change.detector": "default",
        "connect.datalake.skip.null.values": false,
        "connect.datalake.latest.schema.optimization.enabled": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: S3Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.aws.s3.sink.S3SinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.s3.aws.region": "",
        "connect.s3.aws.access.key": "[hidden]",
        "connect.s3.aws.secret.key": "[hidden]",
        "connect.s3.aws.auth.mode": "Default",
        "connect.s3.error.policy": "THROW",
        "connect.s3.kcql": ""
      }
    },
    {
      "label": "Connector: S3Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.aws.s3.sink.S3SinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.s3.aws.region": "",
        "connect.s3.aws.access.key": "[hidden]",
        "connect.s3.aws.secret.key": "[hidden]",
        "connect.s3.aws.auth.mode": "Default",
        "connect.s3.custom.endpoint": "",
        "connect.s3.vhost.bucket": false,
        "connect.s3.http.max.retries": 5,
        "connect.s3.http.retry.interval": 50,
        "connect.s3.http.socket.timeout": 60000,
        "connect.s3.http.connection.timeout": 60000,
        "connect.s3.pool.max.connections": -1,
        "connect.s3.compression.codec": "UNCOMPRESSED",
        "connect.s3.compression.level": -1,
        "connect.s3.delete.mode": "BatchDelete",
        "connect.s3.log.metrics": false,
        "connect.s3.max.retries": 20,
        "connect.s3.retry.interval": 60000,
        "connect.s3.error.policy": "THROW",
        "connect.s3.kcql": "",
        "connect.s3.disable.flush.count": false,
        "connect.s3.local.tmp.directory": "",
        "connect.s3.padding.strategy": "",
        "connect.s3.padding.length": -1,
        "connect.s3.seek.max.files": 5,
        "connect.s3.indexes.name": ".indexes",
        "connect.s3.exactly.once.enable": true,
        "connect.s3.schema.change.detector": "default",
        "connect.s3.skip.null.values": false,
        "connect.s3.latest.schema.optimization.enabled": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Http Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.http.sink.HttpSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.location": "",
        "ssl.truststore.password": "",
        "connect.http.method": "POST",
        "connect.http.endpoint": "",
        "connect.http.request.content": "",
        "connect.http.request.headers": [],
        "connect.http.connection.timeout.ms": 10000,
        "connect.http.retries.max.timeout.ms": 30000,
        "connect.http.retries.max.retries": 5,
        "connect.http.retry.mode": "exponential",
        "connect.http.retries.on.status.codes": [
          "408",
          "429",
          "502",
          "504",
          "500",
          "503"
        ],
        "connect.http.retry.fixed.interval.ms": 10000,
        "connect.http.batch.count": 1,
        "connect.http.batch.size": 0,
        "connect.http.time.interval": 0,
        "connect.http.authentication.type": "none",
        "connect.http.authentication.basic.username": "",
        "connect.http.authentication.basic.password": "[hidden]",
        "connect.http.json.tidy": false,
        "connect.http.null.payload.handler": "error",
        "connect.http.null.payload.handler.custom": "",
        "connect.http.max.queue.size": 1000000,
        "connect.http.max.queue.offer.timeout.ms": 120000,
        "connect.http.copy.message.headers": false,
        "connect.http.authentication.oauth2.token.url": "",
        "connect.http.authentication.oauth2.client.id": "",
        "connect.http.authentication.oauth2.client.secret": "[hidden]",
        "connect.http.authentication.oauth2.token.property": "access_token",
        "connect.http.authentication.oauth2.client.scope": "any",
        "connect.http.authentication.oauth2.client.headers": [],
        "connect.http.authentication.oauth2.client.headers.separator": ":"
      }
    },
    {
      "label": "Connector: Http Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.http.sink.HttpSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "ssl.protocol": "TLSv1.3",
        "ssl.provider": "",
        "ssl.cipher.suites": [],
        "ssl.enabled.protocols": [
          "TLSv1.2",
          "TLSv1.3"
        ],
        "ssl.keystore.type": "JKS",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.type": "JKS",
        "ssl.truststore.location": "",
        "ssl.truststore.password": "",
        "ssl.keymanager.algorithm": "SunX509",
        "ssl.trustmanager.algorithm": "PKIX",
        "ssl.endpoint.identification.algorithm": "https",
        "ssl.secure.random.implementation": "",
        "ssl.engine.factory.class": "",
        "connect.http.method": "POST",
        "connect.http.endpoint": "",
        "connect.http.request.content": "",
        "connect.http.request.headers": [],
        "connect.http.error.threshold": 5,
        "connect.http.upload.sync.period": 100,
        "connect.http.connection.timeout.ms": 10000,
        "connect.http.retries.max.timeout.ms": 30000,
        "connect.http.retries.max.retries": 5,
        "connect.http.retry.mode": "exponential",
        "connect.http.retries.on.status.codes": [
          "408",
          "429",
          "502",
          "504",
          "500",
          "503"
        ],
        "connect.http.retry.fixed.interval.ms": 10000,
        "connect.http.batch.count": 1,
        "connect.http.batch.size": 0,
        "connect.http.time.interval": 0,
        "connect.http.authentication.type": "none",
        "connect.http.authentication.basic.username": "",
        "connect.http.authentication.basic.password": "[hidden]",
        "connect.http.json.tidy": false,
        "connect.http.null.payload.handler": "error",
        "connect.http.null.payload.handler.custom": "",
        "connect.http.max.queue.size": 1000000,
        "connect.http.max.queue.offer.timeout.ms": 120000,
        "connect.http.copy.message.headers": false,
        "connect.reporting.error.config.enabled": false,
        "connect.reporting.error.config.topic": "",
        "connect.reporting.error.config.bootstrap.servers": "",
        "connect.reporting.error.config.sasl.jaas.config": "",
        "connect.reporting.error.config.security.protocol": "",
        "connect.reporting.error.config.sasl.mechanism": "",
        "connect.reporting.error.config.partition": -1,
        "connect.reporting.success.config.enabled": false,
        "connect.reporting.success.config.topic": "",
        "connect.reporting.success.config.bootstrap.servers": "",
        "connect.reporting.success.config.sasl.jaas.config": "",
        "connect.reporting.success.config.security.protocol": "",
        "connect.reporting.success.config.sasl.mechanism": "",
        "connect.reporting.success.config.partition": -1,
        "connect.http.authentication.oauth2.token.url": "",
        "connect.http.authentication.oauth2.client.id": "",
        "connect.http.authentication.oauth2.client.secret": "[hidden]",
        "connect.http.authentication.oauth2.token.property": "access_token",
        "connect.http.authentication.oauth2.client.scope": "any",
        "connect.http.authentication.oauth2.client.headers": [],
        "connect.http.authentication.oauth2.client.headers.separator": ":",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: GCPPub Sub Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.gcp.pubsub.source.GCPPubSubSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.pubsub.kcql": "",
        "connect.pubsub.gcp.project.id": "",
        "connect.pubsub.output.mode": "",
        "connect.pubsub.gcp.auth.mode": "DEFAULT",
        "connect.pubsub.gcp.credentials": "[hidden]",
        "connect.pubsub.gcp.file": ""
      }
    },
    {
      "label": "Connector: GCPPub Sub Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.gcp.pubsub.source.GCPPubSubSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.pubsub.kcql": "",
        "connect.pubsub.gcp.project.id": "",
        "connect.pubsub.output.mode": "",
        "connect.pubsub.gcp.auth.mode": "DEFAULT",
        "connect.pubsub.gcp.credentials": "[hidden]",
        "connect.pubsub.gcp.file": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Azure Service Bus Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.servicebus.sink.AzureServiceBusSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.servicebus.connection.string": "",
        "connect.servicebus.sink.retries.max": 3,
        "connect.servicebus.sink.retries.timeout": 500,
        "connect.servicebus.kcql": ""
      }
    },
    {
      "label": "Connector: Azure Service Bus Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.servicebus.sink.AzureServiceBusSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.servicebus.connection.string": "",
        "connect.servicebus.sink.retries.max": 3,
        "connect.servicebus.sink.retries.timeout": 500,
        "connect.servicebus.kcql": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Cassandra Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.cassandra.CassandraSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.cassandra.contact.points": "localhost",
        "connect.cassandra.port": 9042,
        "connect.cassandra.auth.provider": "None",
        "connect.cassandra.auth.username": "",
        "connect.cassandra.auth.password": "[hidden]",
        "connect.cassandra.auth.gssapi.keytab": "",
        "connect.cassandra.auth.gssapi.principal": "",
        "connect.cassandra.auth.gssapi.service": "dse",
        "connect.cassandra.kcql": "",
        "connect.cassandra.error.policy": "THROW"
      }
    },
    {
      "label": "Connector: Cassandra Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.cassandra.CassandraSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.cassandra.contact.points": "localhost",
        "connect.cassandra.port": 9042,
        "connect.cassandra.max.concurrent.requests": 100,
        "connect.cassandra.connection.pool.size": 2,
        "connect.cassandra.compression": "none",
        "connect.cassandra.query.timeout.ms": 20000,
        "connect.cassandra.max.batch.size": 64,
        "connect.cassandra.load.balancing.local.dc": "",
        "connect.cassandra.ssl.enabled": false,
        "connect.cassandra.ssl.truststore.path": "",
        "connect.cassandra.ssl.truststore.password": "[hidden]",
        "connect.cassandra.ssl.keystore.path": "",
        "connect.cassandra.ssl.keystore.password": "[hidden]",
        "connect.cassandra.ssl.provider": "None",
        "connect.cassandra.ssl.cipher.suites": "",
        "connect.cassandra.ssl.hostname.verification": true,
        "connect.cassandra.ssl.openssl.key.cert.chain": "",
        "connect.cassandra.ssl.openssl.private.key": "",
        "connect.cassandra.auth.provider": "None",
        "connect.cassandra.auth.username": "",
        "connect.cassandra.auth.password": "[hidden]",
        "connect.cassandra.auth.gssapi.keytab": "",
        "connect.cassandra.auth.gssapi.principal": "",
        "connect.cassandra.auth.gssapi.service": "dse",
        "connect.cassandra.ignore.errors.mode": "none",
        "connect.cassandra.max.retries": 20,
        "connect.cassandra.retry.interval": 60000,
        "connect.cassandra.kcql": "",
        "connect.progress.enabled": false,
        "connect.cassandra.error.policy": "THROW",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Redis Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.redis.sink.RedisSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.redis.host": "",
        "connect.redis.port": 0,
        "connect.redis.kcql": "",
        "connect.redis.error.policy": "THROW",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.location": "",
        "ssl.truststore.password": ""
      }
    },
    {
      "label": "Connector: Redis Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.redis.sink.RedisSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.redis.host": "",
        "connect.redis.port": 0,
        "connect.redis.password": "",
        "connect.redis.ssl.enabled": false,
        "connect.redis.kcql": "",
        "connect.redis.error.policy": "THROW",
        "connect.redis.retry.interval": 60000,
        "connect.redis.max.retries": 20,
        "connect.progress.enabled": false,
        "connect.redis.pk.delimiter": ".",
        "ssl.protocol": "TLSv1.3",
        "ssl.provider": "",
        "ssl.cipher.suites": [],
        "ssl.enabled.protocols": [
          "TLSv1.2",
          "TLSv1.3"
        ],
        "ssl.keystore.type": "JKS",
        "ssl.keystore.location": "",
        "ssl.keystore.password": "",
        "ssl.key.password": "",
        "ssl.keystore.key": "",
        "ssl.keystore.certificate.chain": "",
        "ssl.truststore.certificates": "",
        "ssl.truststore.type": "JKS",
        "ssl.truststore.location": "",
        "ssl.truststore.password": "",
        "ssl.keymanager.algorithm": "SunX509",
        "ssl.trustmanager.algorithm": "PKIX",
        "ssl.endpoint.identification.algorithm": "https",
        "ssl.secure.random.implementation": "",
        "ssl.engine.factory.class": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Influx Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.influx.InfluxSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.influx.url": "",
        "connect.influx.db": "",
        "connect.influx.username": "",
        "connect.influx.password": "[hidden]",
        "connect.influx.kcql": "",
        "connect.influx.error.policy": "THROW",
        "connect.influx.retention.policy": "autogen"
      }
    },
    {
      "label": "Connector: Influx Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.influx.InfluxSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.influx.url": "",
        "connect.influx.db": "",
        "connect.influx.username": "",
        "connect.influx.password": "[hidden]",
        "connect.influx.kcql": "",
        "connect.influx.error.policy": "THROW",
        "connect.influx.retry.interval": 60000,
        "connect.influx.max.retries": 20,
        "connect.influx.retention.policy": "autogen",
        "connect.influx.consistency.level": "ALL",
        "connect.progress.enabled": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Cosmos Db Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.cosmosdb.sink.CosmosDbSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.cosmosdb.endpoint": "",
        "connect.cosmosdb.master.key": "",
        "connect.cosmosdb.consistency.level": "Session",
        "connect.cosmosdb.db": "",
        "connect.cosmosdb.error.policy": "THROW",
        "connect.cosmosdb.kcql": ""
      }
    },
    {
      "label": "Connector: Cosmos Db Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.azure.cosmosdb.sink.CosmosDbSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.cosmosdb.endpoint": "",
        "connect.cosmosdb.master.key": "",
        "connect.cosmosdb.consistency.level": "Session",
        "connect.cosmosdb.db": "",
        "connect.cosmosdb.db.create": false,
        "connect.cosmosdb.key.source": "Key",
        "connect.cosmosdb.key.path": "id",
        "connect.cosmosdb.bulk.enabled": false,
        "connect.cosmosdb.proxy": "",
        "connect.cosmosdb.error.policy": "THROW",
        "connect.cosmosdb.max.retries": 20,
        "connect.cosmosdb.retry.interval": 60000,
        "connect.progress.enabled": false,
        "connect.cosmosdb.max.queue.size": 1000000,
        "connect.cosmosdb.max.queue.offer.timeout.ms": 120000,
        "connect.cosmosdb.collection.throughput": 400,
        "connect.cosmosdb.executor.threads": 1,
        "connect.cosmosdb.upload.sync.period": 100,
        "connect.cosmosdb.error.threshold": 5,
        "connect.cosmosdb.flush.count.enable": false,
        "connect.cosmosdb.kcql": "",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: GCPStorage Sink - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.gcp.storage.sink.GCPStorageSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.gcpstorage.error.policy": "THROW",
        "connect.gcpstorage.gcp.project.id": "",
        "connect.gcpstorage.gcp.quota.project.id": "",
        "connect.gcpstorage.gcp.auth.mode": "DEFAULT",
        "connect.gcpstorage.gcp.credentials": "[hidden]",
        "connect.gcpstorage.gcp.file": "",
        "connect.gcpstorage.kcql": "",
        "connect.gcpstorage.avoid.resumable.upload": false
      }
    },
    {
      "label": "Connector: GCPStorage Sink - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.gcp.storage.sink.GCPStorageSinkConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "topics.regex": "",
        "connect.gcpstorage.error.policy": "THROW",
        "connect.gcpstorage.max.retries": 20,
        "connect.gcpstorage.retry.interval": 60000,
        "connect.gcpstorage.compression.codec": "UNCOMPRESSED",
        "connect.gcpstorage.compression.level": -1,
        "connect.gcpstorage.gcp.project.id": "",
        "connect.gcpstorage.gcp.quota.project.id": "",
        "connect.gcpstorage.endpoint": "",
        "connect.gcpstorage.http.max.retries": 36,
        "connect.gcpstorage.http.retry.interval": 500,
        "connect.gcpstorage.http.retry.timeout.multiplier": 3.0,
        "connect.gcpstorage.gcp.auth.mode": "DEFAULT",
        "connect.gcpstorage.gcp.credentials": "[hidden]",
        "connect.gcpstorage.gcp.file": "",
        "connect.gcpstorage.kcql": "",
        "connect.gcpstorage.disable.flush.count": false,
        "connect.gcpstorage.log.metrics": false,
        "connect.gcpstorage.local.tmp.directory": "",
        "connect.gcpstorage.padding.strategy": "",
        "connect.gcpstorage.padding.length": -1,
        "connect.gcpstorage.avoid.resumable.upload": false,
        "connect.gcpstorage.seek.max.files": 5,
        "connect.gcpstorage.indexes.name": ".indexes",
        "connect.gcpstorage.exactly.once.enable": true,
        "connect.gcpstorage.schema.change.detector": "default",
        "connect.gcpstorage.skip.null.values": false,
        "connect.gcpstorage.latest.schema.optimization.enabled": false,
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Connector: Cassandra Source - Minimal",
      "description": "Minimal configuration with required fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.cassandra.source.CassandraSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.cassandra.contact.points": "localhost",
        "connect.cassandra.port": 9042,
        "connect.cassandra.key.space": "",
        "connect.cassandra.username": "",
        "connect.cassandra.error.policy": "THROW",
        "connect.cassandra.kcql": ""
      }
    },
    {
      "label": "Connector: Cassandra Source - Full",
      "description": "Full configuration with all fields",
      "body": {
        "connector.class": "io.lenses.streamreactor.connect.cassandra.source.CassandraSourceConnector",
        "name": "",
        "tasks.max": "1",
        "topics": "",
        "connect.cassandra.contact.points": "localhost",
        "connect.cassandra.port": 9042,
        "connect.cassandra.key.space": "",
        "connect.cassandra.username": "",
        "connect.cassandra.password": "[hidden]",
        "connect.cassandra.ssl.enabled": false,
        "connect.cassandra.trust.store.path": "",
        "connect.cassandra.trust.store.password": "[hidden]",
        "connect.cassandra.trust.store.type": "JKS",
        "connect.cassandra.key.store.type": "JKS",
        "connect.cassandra.ssl.client.cert.auth": false,
        "connect.cassandra.key.store.path": "",
        "connect.cassandra.key.store.password": "[hidden]",
        "connect.cassandra.consistency.level": "",
        "connect.cassandra.error.policy": "THROW",
        "connect.cassandra.max.retries": 20,
        "connect.cassandra.retry.interval": 60000,
        "connect.cassandra.fetch.size": 5000,
        "connect.cassandra.load.balancing.policy": "TOKEN_AWARE",
        "connect.cassandra.connect.timeout.ms": 5000,
        "connect.cassandra.read.timeout.ms": 12000,
        "connect.cassandra.assigned.tables": "",
        "connect.cassandra.kcql": "",
        "connect.cassandra.task.buffer.size": 10000,
        "connect.cassandra.batch.size": 100,
        "connect.cassandra.import.poll.interval": 1000,
        "connect.cassandra.import.allow.filtering": true,
        "connect.cassandra.time.slice.ms": 10000,
        "connect.cassandra.slice.duration": 10000,
        "connect.cassandra.slice.delay.ms": 30000,
        "connect.cassandra.initial.offset": "1900-01-01 00:00:00.0000000Z",
        "connect.cassandra.mapping.collection.to.json": true,
        "connect.cassandra.bucket.timeseries.mode": "",
        "connect.cassandra.bucket.timeseries.format": "",
        "connect.cassandra.bucket.timeseries.field.name": "bucket",
        "transforms": "",
        "transforms.{name}.type": "",
        "transforms.{name}.predicate": "",
        "transforms.{name}.negate": false,
        "predicates": "",
        "predicates.{name}.type": "",
        "predicates.{name}.field": "",
        "config.providers": "",
        "config.providers.{name}.type": ""
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry",
      "description": "Configure Avro converters with Schema Registry integration",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: JSON with Schema",
      "description": "Configure JSON converters with schema support",
      "body": {
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Converter Overrides: String",
      "description": "Configure String converters without schema",
      "body": {
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.storage.StringConverter",
        "key.converter.schemas.enable": false,
        "value.converter.schemas.enable": false
      }
    },
    {
      "label": "Converter Overrides: Avro with Schema Registry Auth",
      "description": "Configure Avro converters with Schema Registry authentication",
      "body": {
        "key.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "key.converter.schema.registry.url": "http://localhost:8081",
        "value.converter.schema.registry.url": "http://localhost:8081",
        "key.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "key.converter.schema.registry.basic.auth.user.info": "user:pass",
        "value.converter.schema.registry.basic.auth.user.info": "user:pass",
        "key.converter.schemas.enable": true,
        "value.converter.schemas.enable": true
      }
    },
    {
      "label": "Consumer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "PLAIN",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "consumer.override.security.protocol": "SASL_SSL",
        "consumer.override.sasl.mechanism": "SCRAM-SHA-512",
        "consumer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Consumer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "consumer.override.security.protocol": "SASL_PLAINTEXT",
        "consumer.override.sasl.mechanism": "GSSAPI",
        "consumer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Consumer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "consumer.override.security.protocol": "SSL",
        "consumer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "consumer.override.ssl.truststore.password": "changeit",
        "consumer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "consumer.override.ssl.keystore.password": "changeit",
        "consumer.override.ssl.key.password": "changeit"
      }
    },
    {
      "label": "Producer Overrides: SASL/PLAIN over SASL_SSL",
      "description": "SASL/PLAIN authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "PLAIN",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: SASL/SCRAM-SHA-512 over SASL_SSL",
      "description": "SCRAM-SHA-512 authentication using SASL_SSL protocol",
      "body": {
        "producer.override.security.protocol": "SASL_SSL",
        "producer.override.sasl.mechanism": "SCRAM-SHA-512",
        "producer.override.sasl.jaas.config": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"user\" password=\"pass\";"
      }
    },
    {
      "label": "Producer Overrides: Kerberos (GSSAPI) with SASL_PLAINTEXT",
      "description": "GSSAPI/Kerberos authentication using SASL_PLAINTEXT",
      "body": {
        "producer.override.security.protocol": "SASL_PLAINTEXT",
        "producer.override.sasl.mechanism": "GSSAPI",
        "producer.override.sasl.jaas.config": "com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab=\"/path/to/keytab\" principal=\"user@REALM.COM\";"
      }
    },
    {
      "label": "Producer Overrides: SSL Only",
      "description": "SSL encryption without SASL authentication",
      "body": {
        "producer.override.security.protocol": "SSL",
        "producer.override.ssl.truststore.location": "/etc/kafka/secrets/kafka.truststore.jks",
        "producer.override.ssl.truststore.password": "changeit",
        "producer.override.ssl.keystore.location": "/etc/kafka/secrets/kafka.keystore.jks",
        "producer.override.ssl.keystore.password": "changeit",
        "producer.override.ssl.key.password": "changeit"
      }
    }
  ]
}